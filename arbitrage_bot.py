#!/usr/bin/env python3

import sys
import traceback
import asyncio
import aiohttp
import json
import os
from web3 import Web3
from web3.middleware import ExtraDataToPOAMiddleware  # –í–ê–ñ–ù–û: POA middleware –¥–ª—è Polygon
from eth_account import Account
from eth_abi import encode
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict
import logging
import math
from decimal import Decimal, ROUND_DOWN

# –ò–º–ø–æ—Ä—Ç LUT –º–æ–¥—É–ª—è
from lut_runtime_v2 import load_lut, size_from_lut

try:
    # –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    from config import (
        CHAIN, RPC_URLS, CONTRACT_ADDRESS, PRIVATE_KEY,
        MIN_PROFIT_USD, MIN_LIQUIDITY_USD, MIN_SPREAD_PERCENT, 
        MAX_PRICE_IMPACT,
        SCAN_INTERVAL, SIMULATION_MODE,
        get_dex_fee, get_flash_loan_fee, get_gas_cost,
        QUOTE_TOKENS,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–º–µ—Å—Ç–æ BASE_TOKENS
        TOKEN_DECIMALS,
        MIN_VOLUME_24H,  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
        ENABLED_DEXES,  # –ù–û–í–û–ï
        DEX_CONFIG,  # –ù–û–í–û–ï
        BASE_TOKEN_USD_PRICES  # –ù–û–í–û–ï - —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
    )
except ImportError as e:
    print(f"\n‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ config.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.")
    traceback.print_exc()
    sys.exit(1)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====

# API endpoints
DEXSCREENER_API = "https://api.dexscreener.com/latest/dex"

# –ü–æ–ª—É—á–∞–µ–º RPC URL –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
RPC_URL = RPC_URLS.get(CHAIN)

# ===== RPC –†–û–¢–ê–¢–û–† –î–õ–Ø –û–ë–•–û–î–ê –õ–ò–ú–ò–¢–û–í =====
class RPCRotator:
    """–†–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ RPC –¥–ª—è –æ–±—Ö–æ–¥–∞ rate limits"""
    def __init__(self, chain="polygon"):
        if chain == "polygon":
            self.rpcs = [
                "https://polygon-rpc.com",
                "https://rpc-mainnet.matic.network", 
                "https://matic-mainnet.chainstacklabs.com",
                # "https://rpc-mainnet.maticvigil.com",  # –û–¢–ö–õ–Æ–ß–ï–ù - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 403
                "https://polygon-bor.publicnode.com",
                "https://polygon.llamarpc.com",
                "https://polygon.rpc.blxrbdn.com",
                "https://polygon-mainnet.public.blastapi.io"
            ]
        else:
            self.rpcs = [RPC_URLS.get(chain)]
            
        self.current = 0
        self.request_count = 0
        self.switch_after = 20
        
    def get_current(self):
        return self.rpcs[self.current]
    
    def get_next(self):
        self.request_count += 1
        if self.request_count >= self.switch_after:
            self.current = (self.current + 1) % len(self.rpcs)
            self.request_count = 0
            print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ RPC #{self.current + 1}: {self.rpcs[self.current][:30]}...")
        return self.rpcs[self.current]
    
    def force_switch(self):
        self.current = (self.current + 1) % len(self.rpcs)
        self.request_count = 0
        print(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ RPC #{self.current + 1}: {self.rpcs[self.current][:30]}...")
        return self.rpcs[self.current]

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—Ç–∞—Ç–æ—Ä–∞
rpc_rotator = RPCRotator(CHAIN)
RPC_URL = rpc_rotator.get_current()


# v6.3: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ config.py —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–º–µ–Ω
BASE_TOKENS = {}
for chain, tokens in {"polygon": QUOTE_TOKENS.get("polygon", [])}.items():
    BASE_TOKENS[chain] = {
        "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174": "USDC.e",
        "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359": "USDC",
        "0xc2132D05D31c914a87C6611C10748AEb04B58e8F": "USDT",
        "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063": "DAI",
        "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270": "WMATIC",
        "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619": "WETH",
        "0x1bfd67037b42cf73acF2047067bd4F2C47D9BfD6": "WBTC",
        "0xD6DF932A45C0f255f85145f286eA0b292B21C90B": "AAVE",
    }

# ABI –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
UNIVERSAL_CONTRACT_ABI = json.loads('''[
    {
        "inputs": [
            {"name": "asset", "type": "address"},
            {"name": "amount", "type": "uint256"},
            {"name": "params", "type": "bytes"}
        ],
        "name": "executeArbitrage",
        "outputs": [],
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [{"name": "", "type": "address"}],
        "type": "function"
    },
    {
        "inputs": [{"name": "token", "type": "address"}],
        "name": "emergencyWithdraw",
        "outputs": [],
        "type": "function"
    }
]''')

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è –ø–∞—Ä—ã (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è factory)
PAIR_ABI = json.loads('''[
    {
        "constant": true,
        "inputs": [],
        "name": "factory",
        "outputs": [{"name": "", "type": "address"}],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "token0",
        "outputs": [{"name": "", "type": "address"}],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "token1",
        "outputs": [{"name": "", "type": "address"}],
        "type": "function"
    }
]''')


@dataclass
class ArbitrageOpportunity:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    token_symbol: str
    token_address: str
    quote_token_address: str  # –ê–¥—Ä–µ—Å quote —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω)
    quote_token_symbol: str  # v6.3: –°–∏–º–≤–æ–ª –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    buy_dex: str
    sell_dex: str
    buy_price: float
    sell_price: float
    spread_percent: float
    optimal_trade_size: float
    expected_profit: float
    buy_liquidity: float
    sell_liquidity: float
    price_impact_percent: float
    buy_dex_pair: str = ""
    sell_dex_pair: str = ""
    buy_router: str = ""  # –ê–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    sell_router: str = ""  # –ê–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏


class CalldataBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å calldata –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ DEX"""
    
    @staticmethod
    def build_v2_swap(
        router: str,
        amount_in: int,
        amount_out_min: int,
        path: List[str],
        to: str,
        deadline: int
    ) -> bytes:
        """–°—Ç—Ä–æ–∏—Ç calldata –¥–ª—è V2 swap (swapExactTokensForTokens)"""
        # Function selector –¥–ª—è swapExactTokensForTokens
        # function swapExactTokensForTokens(uint,uint,address[],address,uint)
        function_selector = Web3.keccak(
            text="swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"
        )[:4]
        
        # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        encoded_params = encode(
            ['uint256', 'uint256', 'address[]', 'address', 'uint256'],
            [amount_in, amount_out_min, path, to, deadline]
        )
        
        return function_selector + encoded_params
    
    @staticmethod
    def build_v3_swap(
        router: str,
        token_in: str,
        token_out: str,
        fee: int,
        recipient: str,
        deadline: int,
        amount_in: int,
        amount_out_min: int,
        sqrt_price_limit: int = 0
    ) -> bytes:
        """–°—Ç—Ä–æ–∏—Ç calldata –¥–ª—è V3 swap (exactInputSingle)"""
        # Function selector –¥–ª—è exactInputSingle
        function_selector = Web3.keccak(
            text="exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))"
        )[:4]
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ExactInputSingleParams
        params = (
            token_in,
            token_out,
            fee,  # 3000 = 0.3%, 500 = 0.05%, 10000 = 1%
            recipient,
            deadline,
            amount_in,
            amount_out_min,
            sqrt_price_limit
        )
        
        # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        encoded_params = encode(
            ['(address,address,uint24,address,uint256,uint256,uint256,uint160)'],
            [params]
        )
        
        return function_selector + encoded_params
    
    @staticmethod
    def build_algebra_swap(
        router: str,
        token_in: str,
        token_out: str,
        recipient: str,
        deadline: int,
        amount_in: int,
        amount_out_min: int,
        sqrt_price_limit: int = 0
    ) -> bytes:
        """–°—Ç—Ä–æ–∏—Ç calldata –¥–ª—è Algebra swap (–ø–æ—Ö–æ–∂ –Ω–∞ V3 –Ω–æ –±–µ–∑ fee)"""
        # Algebra –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ö–æ–∂–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–æ –±–µ–∑ —è–≤–Ω–æ–≥–æ fee
        # Function selector –¥–ª—è exactInputSingle –≤ Algebra
        function_selector = Web3.keccak(
            text="exactInputSingle((address,address,address,uint256,uint256,uint256,uint160))"
        )[:4]
        
        params = (
            token_in,
            token_out,
            recipient,
            deadline,
            amount_in,
            amount_out_min,
            sqrt_price_limit
        )
        
        encoded_params = encode(
            ['(address,address,address,uint256,uint256,uint256,uint160)'],
            [params]
        )
        
        return function_selector + encoded_params

@dataclass
class SwapRoute:
    """–û–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–≤–æ–ø–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ"""
    token_in: str
    token_out: str
    dex: str
    router: str
    amount_in: int = 0  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ–∑–∂–µ


class FlashLoanStrategy:
    """v7.0: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Flash Loan"""
    
    # –¢–æ–∫–µ–Ω—ã —Å —Ö–æ—Ä–æ—à–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –≤ Aave –Ω–∞ Polygon
    AAVE_TOKENS = {
        "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174": "USDC.e",
        "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359": "USDC",
        "0xc2132D05D31c914a87C6611C10748AEb04B58e8F": "USDT",
        "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063": "DAI",
        "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619": "WETH",
        "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270": "WMATIC",
        "0x1bfd67037b42cf73acF2047067bd4F2C47D9BfD6": "WBTC",
    }
    
    @staticmethod
    async def get_aave_liquidity(token_address: str, w3: Web3) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤ Aave"""
        try:
            aave_data_provider = "0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654"
            
            abi = json.loads('''[{
                "inputs": [{"name": "asset", "type": "address"}],
                "name": "getReserveData",
                "outputs": [
                    {"name": "unbacked", "type": "uint256"},
                    {"name": "accruedToTreasuryScaled", "type": "uint256"},
                    {"name": "totalAToken", "type": "uint256"},
                    {"name": "totalStableDebt", "type": "uint256"},
                    {"name": "totalVariableDebt", "type": "uint256"},
                    {"name": "liquidityRate", "type": "uint256"},
                    {"name": "variableBorrowRate", "type": "uint256"},
                    {"name": "stableBorrowRate", "type": "uint256"},
                    {"name": "averageStableBorrowRate", "type": "uint256"},
                    {"name": "liquidityIndex", "type": "uint256"},
                    {"name": "variableBorrowIndex", "type": "uint256"},
                    {"name": "lastUpdateTimestamp", "type": "uint40"}
                ],
                "type": "function"
            }]''')
            
            contract = w3.eth.contract(address=Web3.to_checksum_address(aave_data_provider), abi=abi)
            data = contract.functions.getReserveData(token_address).call()
            
            total_liquidity = data[2]
            total_debt = data[3] + data[4]
            available = total_liquidity - total_debt
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ USD (—É–ø—Ä–æ—â–µ–Ω–Ω–æ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            decimals = 18 if token_address == "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270" else 6
            return available / (10 ** decimals)
            
        except:
            return 0
    
    @classmethod
    async def choose_optimal_flash_loan_token(
        cls,
        opportunity: ArbitrageOpportunity,
        w3: Web3,
        logger
    ) -> Tuple[str, str, List[SwapRoute]]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è Flash Loan
        Returns: (flash_loan_token, token_symbol, swap_routes)
        """
        
        options = []
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: Flash Loan –≤ –±–∞–∑–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ (–∫–∞–∫ —Å–µ–π—á–∞—Å)
        if opportunity.quote_token_address in cls.AAVE_TOKENS:
            route = [
                SwapRoute(
                    token_in=opportunity.quote_token_address,
                    token_out=opportunity.token_address,
                    dex=opportunity.buy_dex,
                    router=opportunity.buy_router
                ),
                SwapRoute(
                    token_in=opportunity.token_address,
                    token_out=opportunity.quote_token_address,
                    dex=opportunity.sell_dex,
                    router=opportunity.sell_router
                )
            ]
            liquidity = await cls.get_aave_liquidity(opportunity.quote_token_address, w3)
            options.append({
                'token': opportunity.quote_token_address,
                'symbol': opportunity.quote_token_symbol,
                'route': route,
                'liquidity': liquidity,
                'strategy': 'base_token'
            })
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: Flash Loan –≤ —Ç–æ—Ä–≥—É–µ–º–æ–º —Ç–æ–∫–µ–Ω–µ (–∏–Ω–≤–µ—Ä—Å–∏—è)
        if opportunity.token_address in cls.AAVE_TOKENS:
            route = [
                SwapRoute(
                    token_in=opportunity.token_address,
                    token_out=opportunity.quote_token_address,
                    dex=opportunity.sell_dex,  # –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫!
                    router=opportunity.sell_router
                ),
                SwapRoute(
                    token_in=opportunity.quote_token_address,
                    token_out=opportunity.token_address,
                    dex=opportunity.buy_dex,
                    router=opportunity.buy_router
                )
            ]
            liquidity = await cls.get_aave_liquidity(opportunity.token_address, w3)
            options.append({
                'token': opportunity.token_address,
                'symbol': opportunity.token_symbol,
                'route': route,
                'liquidity': liquidity,
                'strategy': 'trade_token'
            })
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –í—Å–µ–≥–¥–∞ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å USDC.e (—Å–∞–º—ã–π –ª–∏–∫–≤–∏–¥–Ω—ã–π)
        usdc_address = "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        if opportunity.token_address != usdc_address and opportunity.quote_token_address != usdc_address:
            # –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–ø—ã USDC->base –∏ base->USDC
            # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            pass
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω (USDC)
        # —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–º –±–æ–ª—å—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫—É—Ä—Å
        best = None
        for opt in options:
            if opt['strategy'] == 'base_token':
                best = opt
                break
                
        if not best and options:
            best = options[0]
        
        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è Flash Loan: {best['strategy']}")
        logger.info(f"   –¢–æ–∫–µ–Ω: {best['symbol']} ({best['token'][:10]}...)")
        logger.info(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${best['liquidity']:,.0f}")
        
        return best['token'], best['symbol'], best['route']


class ArbitrageBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.setup_logging()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–æ—Ç–∞—Ç–æ—Ä RPC
        global rpc_rotator
        self.rpc_rotator = rpc_rotator
        
        # Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å POA middleware –¥–ª—è Polygon
        self.w3 = Web3(Web3.HTTPProvider(self.rpc_rotator.get_current()))
        self.logger.info(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ RPC: {self.rpc_rotator.get_current()[:30]}...")
        
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º POA middleware –¥–ª—è Polygon
        if CHAIN in ['polygon', 'bsc']:  # –≠—Ç–∏ —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç POA
            self.w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)
            self.logger.info("‚úÖ POA middleware –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è " + CHAIN)
        
        self.account = Account.from_key(PRIVATE_KEY)
        
        # –ö–æ–Ω—Ç—Ä–∞–∫—Ç (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
        self.contract = self.w3.eth.contract(
            address=Web3.to_checksum_address(CONTRACT_ADDRESS),
            abi=UNIVERSAL_CONTRACT_ABI
        )
        
        # HTTP —Å–µ—Å—Å–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = None
        
        # –í–∫–ª—é—á–∞–µ–º DEBUG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            from config import DEBUG_MODE
            if DEBUG_MODE:
                self.logger.setLevel(logging.DEBUG)
                self.logger.info("üìù DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
        except ImportError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ config, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if os.getenv("DEBUG_MODE", "False").lower() == "true":
                self.logger.setLevel(logging.DEBUG)
                self.logger.info("üìù DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω (–∏–∑ env)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_scans = 0
        self.opportunities_found = 0
        self.trades_executed = 0
        self.total_profit = 0.0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ DEX –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.enabled_dexes = ENABLED_DEXES
        self.dex_config = DEX_CONFIG
        self.logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ {len(self.enabled_dexes)} DEX: {', '.join(self.enabled_dexes)}")
        
        # v6.3: –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
        self.base_tokens = BASE_TOKENS.get(CHAIN, {})
        self.logger.info(f"üìä –ë–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ({len(self.base_tokens)}): {', '.join(self.base_tokens.values())}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º LUT —Ç–∞–±–ª–∏—Ü—É
        try:
            self.lut = load_lut("lut_v2.json")
            self.logger.info("‚úÖ LUT —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LUT: {e}")
            self.lut = None
        
        # –ö—ç—à –¥–ª—è —Ä–µ–∑–æ–ª–≤–∞ –ø–∞—Ä: (dex, token0, token1) -> pair_address
        self.pair_address_cache = {}
        self.logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫—ç—à –∞–¥—Ä–µ—Å–æ–≤ –ø–∞—Ä")
        
        # –ù–û–í–û–ï v6.5: –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø–∞—Ä—ã DEX —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏
        self.verified_dex_pairs = {
            'polygon': [
                ('quickswap', 'sushiswap'),  # –¢–æ—á–Ω–æ —Ä–∞–∑–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
                ('quickswap', 'apeswap'),    # –¢–æ—á–Ω–æ —Ä–∞–∑–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
                ('sushiswap', 'apeswap'),    # –¢–æ—á–Ω–æ —Ä–∞–∑–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
                ('quickswap', 'dfyn'),        # –¢–æ—á–Ω–æ —Ä–∞–∑–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
                ('quickswap', 'jetswap'),     # –¢–æ—á–Ω–æ —Ä–∞–∑–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
                # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º ('quickswap', 'uniswap') - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã!
            ]
        }.get(CHAIN, [])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.BASE_TOKEN_USD_PRICES = BASE_TOKEN_USD_PRICES
        
    async def choose_flash_loan_asset(self, opportunity: ArbitrageOpportunity) -> Tuple[str, str, List[SwapRoute]]:
        """v7.0: –£–º–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Flash Loan —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º"""
        return await FlashLoanStrategy.choose_optimal_flash_loan_token(
            opportunity,
            self.w3,
            self.logger
        )
    
    def safe_web3_call(self, func, *args, max_retries=3, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ Web3 —Å –∞–≤—Ç–æ-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º RPC –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        for attempt in range(max_retries):
            try:
                return func(*args, **kwargs)  # –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            except Exception as e:
                error_str = str(e).lower()
                if any(err in error_str for err in ['rate limit', 'too many requests', '429']):
                    self.logger.warning("‚ö†Ô∏è Rate limit, –ø–µ—Ä–µ–∫–ª—é—á–∞—é RPC...")
                    new_rpc = self.rpc_rotator.force_switch()
                    self.w3 = Web3(Web3.HTTPProvider(new_rpc))
                    if CHAIN in ['polygon', 'bsc']:
                        self.w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)
                    if attempt < max_retries - 1:
                        import time; time.sleep(0.5)
                        continue
                if attempt == max_retries - 1:
                    raise
            except Exception as e:
                error_str = str(e).lower()
                if any(err in error_str for err in ['rate limit', 'too many requests', '429']):
                    self.logger.warning(f"‚ö†Ô∏è Rate limit, –ø–µ—Ä–µ–∫–ª—é—á–∞—é RPC...")
                    new_rpc = self.rpc_rotator.force_switch()
                    self.w3 = Web3(Web3.HTTPProvider(new_rpc))
                    if CHAIN in ['polygon', 'bsc']:
                        self.w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)
                    if attempt < max_retries - 1:
                        import time
                        time.sleep(0.5)
                        continue
                if attempt == max_retries - 1:
                    raise e
        return None
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import sys
        import codecs
        
        if sys.platform == 'win32':
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
        
        log_format = '%(asctime)s | %(levelname)s | %(message)s'
            
        logging.basicConfig(
            level=logging.INFO,
            format=log_format,
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('arbitrage_bot.log', encoding='utf-8')
            ]
        )
        self.logger = logging.getLogger('ArbitrageBot')
    
        
    def get_token_decimals(self, token_address: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
        checksum_address = Web3.to_checksum_address(token_address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ
        if checksum_address in TOKEN_DECIMALS:
            return TOKEN_DECIMALS[checksum_address]
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
        try:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ERC20 ABI –¥–ª—è decimals
            erc20_abi = json.loads('[{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}]')
            token_contract = self.w3.eth.contract(address=checksum_address, abi=erc20_abi)
            decimals = self.safe_web3_call(token_contract.functions.decimals().call)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            TOKEN_DECIMALS[checksum_address] = decimals
            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã decimals –¥–ª—è {checksum_address}: {decimals}")
            return decimals
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å decimals –¥–ª—è {checksum_address}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 18: {e}")
            # –í–ê–ñ–ù–û: –ö—ç—à–∏—Ä—É–µ–º –¥–∞–∂–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏—Ö
            TOKEN_DECIMALS[checksum_address] = 18
            return 18  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def is_base_token(self, token_address: str) -> bool:
        """v6.3: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –±–∞–∑–æ–≤—ã–º (stablecoin/WMATIC/WETH)"""
        if not token_address:
            return False
        try:
            return token_address.lower() in [addr.lower() for addr in self.base_tokens.keys()]
        except AttributeError:
            self.logger.debug(f"is_base_token: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å {token_address}")
            return False
    
    def get_base_token_symbol(self, token_address: str) -> str:
        """v6.3: –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–º–≤–æ–ª –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        for addr, symbol in self.base_tokens.items():
            if addr.lower() == token_address.lower():
                return symbol
        return "UNKNOWN"
    
    
    async def is_v2_pair(self, pair_address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å V2-–ø–∞—Ä–æ–π"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –±–∞–π—Ç–∫–æ–¥
            bytecode = self.w3.eth.get_code(Web3.to_checksum_address(pair_address))
            if len(bytecode) <= 2:
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ token0() –∏ token1()
            pair_abi = json.loads('[{"constant":true,"inputs":[],"name":"token0","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"token1","outputs":[{"name":"","type":"address"}],"type":"function"}]')
            pair_contract = self.w3.eth.contract(address=Web3.to_checksum_address(pair_address), abi=pair_abi)
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å token0() –∏ token1()
            token0 = pair_contract.functions.token0().call()
            token1 = pair_contract.functions.token1().call()
            
            # –ï—Å–ª–∏ –æ–±–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - —ç—Ç–æ V2-–ø–∞—Ä–∞
            return token0 != '0x0000000000000000000000000000000000000000' and token1 != '0x0000000000000000000000000000000000000000'
        except:
            return False

    def compute_pair_address_create2(self, factory: str, token0: str, token1: str, init_code_hash: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥—Ä–µ—Å –ø–∞—Ä—ã —á–µ—Ä–µ–∑ CREATE2"""
        from eth_abi import encode
        from eth_utils import keccak
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
        if token0.lower() > token1.lower():
            token0, token1 = token1, token0
            
        # –£–±–∏—Ä–∞–µ–º 0x –∏–∑ –∞–¥—Ä–µ—Å–æ–≤
        factory_clean = factory[2:] if factory.startswith('0x') else factory
        token0_clean = token0[2:] if token0.startswith('0x') else token0
        token1_clean = token1[2:] if token1.startswith('0x') else token1
        init_code_clean = init_code_hash[2:] if init_code_hash.startswith('0x') else init_code_hash
        
        # –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
        encoded = encode(['address', 'address'], [Web3.to_checksum_address(token0), Web3.to_checksum_address(token1)])
        
        # –í—ã—á–∏—Å–ª—è–µ–º salt = keccak256(encoded)
        salt = keccak(encoded).hex()
        
        # CREATE2: 0xff ++ factory ++ salt ++ init_code_hash
        data = 'ff' + factory_clean + salt + init_code_clean
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å
        raw_address = keccak(bytes.fromhex(data))[12:].hex()
        
        return Web3.to_checksum_address('0x' + raw_address)
    
    def get_cached_pair_address(self, dex: str, token0: str, token1: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–∞—Ä—ã –∏–∑ –∫—ç—à–∞"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_tokens = tuple(sorted([token0.lower(), token1.lower()]))
        cache_key = (dex.lower(), sorted_tokens[0], sorted_tokens[1])
        return self.pair_address_cache.get(cache_key)

    def cache_pair_address(self, dex: str, token0: str, token1: str, pair_address: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –ø–∞—Ä—ã –≤ –∫—ç—à"""
        sorted_tokens = tuple(sorted([token0.lower(), token1.lower()]))
        cache_key = (dex.lower(), sorted_tokens[0], sorted_tokens[1])
        self.pair_address_cache[cache_key] = pair_address.lower()
    
    async def get_v2_reserves_by_router(self, router_addr: str, tokenA: str, tokenB: str, dex_name: str = None):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä—É —á–µ—Ä–µ–∑ router->factory.getPair(tokenA, tokenB) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤—ã/–∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤.
        –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è V2-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö DEX.
        –í–æ–∑–≤—Ä–∞—Ç: dict {pair, token0, token1, reserve0, reserve1} –∏–ª–∏ None.
        """
        from web3 import Web3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è DEX
        if dex_name:
            cached_pair = self.get_cached_pair_address(dex_name, tokenA, tokenB)
            if cached_pair:
                self.logger.debug(f"   üì¶ –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞—Ä—ã –¥–ª—è {dex_name}: {cached_pair}")
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
                pair_reserves = await self.get_pair_reserves(cached_pair)
                if pair_reserves:
                    return {
                        'pair': cached_pair,
                        'token0': pair_reserves.get('token0'),
                        'token1': pair_reserves.get('token1'),
                        'reserve0': pair_reserves.get('reserve0'),
                        'reserve1': pair_reserves.get('reserve1')
                    }
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∫—ç—à–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–º –ø—É—Ç–µ–º
                self.logger.debug(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞—Ä—ã, –ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ factory")

        ROUTER_ABI = [
            {"inputs": [], "name": "factory", "outputs": [{"internalType": "address", "name": "", "type": "address"}],
             "stateMutability": "view", "type": "function"}
        ]
        FACTORY_ABI = [
            {"inputs": [{"internalType": "address", "name": "tokenA", "type": "address"},
                        {"internalType": "address", "name": "tokenB", "type": "address"}],
             "name": "getPair", "outputs": [{"internalType": "address", "name": "pair", "type": "address"}],
             "stateMutability": "view", "type": "function"}
        ]
        PAIR_ABI = [
            {"inputs": [], "name": "token0", "outputs": [{"internalType": "address", "name": "", "type": "address"}],
             "stateMutability": "view", "type": "function"},
            {"inputs": [], "name": "token1", "outputs": [{"internalType": "address", "name": "", "type": "address"}],
             "stateMutability": "view", "type": "function"},
            {"inputs": [], "name": "getReserves", "outputs": [
                {"internalType": "uint112", "name": "reserve0", "type": "uint112"},
                {"internalType": "uint112", "name": "reserve1", "type": "uint112"},
                {"internalType": "uint32", "name": "blockTimestampLast", "type": "uint32"}],
             "stateMutability": "view", "type": "function"}
        ]
        try:
            router = self.w3.eth.contract(address=Web3.to_checksum_address(router_addr), abi=ROUTER_ABI)
            factory_addr = router.functions.factory().call()
            if int(factory_addr, 16) == 0:
                self.logger.error(f"factory() –≤–µ—Ä–Ω—É–ª 0 –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ {router_addr}")
                return None

            factory = self.w3.eth.contract(address=factory_addr, abi=FACTORY_ABI)
            a = Web3.to_checksum_address(tokenA)
            b = Web3.to_checksum_address(tokenB)
            
            self.logger.debug(f"   Factory.getPair({a}, {b})")
            pair_addr = factory.functions.getPair(a, b).call()
            self.logger.debug(f"   Factory returned pair: {pair_addr}")
            if int(pair_addr, 16) == 0:
                self.logger.debug(f"getPair({a},{b}) –≤–µ—Ä–Ω—É–ª 0 ‚Äî –ø–∞—Ä—ã –Ω–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–º DEX")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è DEX
            if dex_name:
                self.cache_pair_address(dex_name, tokenA, tokenB, pair_addr)
                self.logger.debug(f"   üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª –∞–¥—Ä–µ—Å –ø–∞—Ä—ã –≤ –∫—ç—à –¥–ª—è {dex_name}")

            pair = self.w3.eth.contract(address=pair_addr, abi=PAIR_ABI)
            token0 = self.safe_web3_call(pair.functions.token0().call)
            token1 = self.safe_web3_call(pair.functions.token1().call)
            reserves = self.safe_web3_call(pair.functions.getReserves().call)
            if not reserves:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è –ø–∞—Ä—ã {pair_addr}")
                return None
            r0, r1, _ = reserves

            return {"pair": pair_addr, "token0": token0, "token1": token1, "reserve0": r0, "reserve1": r1}
        except Exception as e:
            error_str = str(e)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –æ—à–∏–±–∫—É
            if "rate limit" in error_str.lower() or "too many requests" in error_str.lower():
                self.logger.warning(f"‚ö†Ô∏è Rate limit –Ω–∞ {self.rpc_rotator.get_current()[:30]}..., –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π RPC")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º RPC
                self.rpc_rotator.force_switch()
                new_rpc = self.rpc_rotator.get_current()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.w3 = Web3(Web3.HTTPProvider(new_rpc))
                if CHAIN in ['polygon', 'bsc']:
                    from web3.middleware import ExtraDataToPOAMiddleware
                    self.w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)
                
                self.logger.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ {new_rpc[:30]}...")
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –Ω–æ–≤—ã–º RPC (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤)
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                return await self.get_v2_reserves_by_router(router_addr, tokenA, tokenB, dex_name)
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                self.logger.exception(f"get_v2_reserves_by_router failed: {e}")
                return None

    
    async def get_pair_reserves(self, pair_address: str) -> Optional[Dict]:  # –ò–°–ü–†–ê–í–õ–ï–ù–ê –¢–ò–ü–ò–ó–ê–¶–ò–Ø
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –ø–∞—Ä—ã"""
        try:
            pair_abi = json.loads('''[
                {
                    "constant": true,
                    "inputs": [],
                    "name": "getReserves",
                    "outputs": [
                        {"name": "reserve0", "type": "uint112"},
                        {"name": "reserve1", "type": "uint112"},
                        {"name": "blockTimestampLast", "type": "uint32"}
                    ],
                    "type": "function"
                },
                {
                    "constant": true,
                    "inputs": [],
                    "name": "token0",
                    "outputs": [{"name": "", "type": "address"}],
                    "type": "function"
                },
                {
                    "constant": true,
                    "inputs": [],
                    "name": "token1",
                    "outputs": [{"name": "", "type": "address"}],
                    "type": "function"
                }
            ]''')
            
            pair_contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(pair_address),
                abi=pair_abi
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã –∏ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
            reserves = pair_contract.functions.getReserves().call()
            token0 = pair_contract.functions.token0().call()
            token1 = pair_contract.functions.token1().call()
            
            return {
                'reserve0': reserves[0],
                'reserve1': reserves[1],
                'token0': token0,
                'token1': token1
            }
        except:
            return None

    def calculate_mid_price_from_reserves(self, reserve0: int, reserve1: int, 
                                         token0_decimals: int, token1_decimals: int,
                                         base_is_token0: bool = True) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É TRADE —Ç–æ–∫–µ–Ω–∞ –≤ BASE —Ç–æ–∫–µ–Ω–∞—Ö
        base_is_token0=True –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ token0 —ç—Ç–æ BASE —Ç–æ–∫–µ–Ω
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–∫–æ–ª—å–∫–æ BASE —Ç–æ–∫–µ–Ω–æ–≤ —Å—Ç–æ–∏—Ç 1 TRADE —Ç–æ–∫–µ–Ω
        """
        if reserve0 == 0 or reserve1 == 0:
            return 0
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–∞–º —Å —É—á–µ—Ç–æ–º decimals
        reserve0_normalized = reserve0 / (10 ** token0_decimals)
        reserve1_normalized = reserve1 / (10 ** token1_decimals)
        
        if base_is_token0:
            # token0 = BASE, token1 = TRADE
            # –¶–µ–Ω–∞ = —Å–∫–æ–ª—å–∫–æ BASE –∑–∞ 1 TRADE = reserve0/reserve1
            if reserve1_normalized == 0:
                return 0
            return reserve0_normalized / reserve1_normalized
        else:
            # token0 = TRADE, token1 = BASE  
            # –¶–µ–Ω–∞ = —Å–∫–æ–ª—å–∫–æ BASE –∑–∞ 1 TRADE = reserve1/reserve0
            if reserve0_normalized == 0:
                return 0
            return reserve1_normalized / reserve0_normalized

    def calculate_liquidity_usd(self, reserve_base: int, base_token_address: str, 
                               base_decimals: int) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –≤ USD –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–µ—Ä–≤–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å = 2 * (—Ä–µ–∑–µ—Ä–≤_–±–∞–∑–æ–≤–æ–≥–æ_—Ç–æ–∫–µ–Ω–∞ * —Ü–µ–Ω–∞_–±–∞–∑–æ–≤–æ–≥–æ_—Ç–æ–∫–µ–Ω–∞_–≤_USD)
        """
        from config import BASE_TOKEN_USD_PRICES
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ USD
        base_price_usd = BASE_TOKEN_USD_PRICES.get(base_token_address.lower(), 0)
        
        if base_price_usd == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
            token_symbol = self.base_tokens.get(base_token_address.lower(), '')
            if token_symbol in ['USDC', 'USDC.e', 'USDT', 'DAI']:
                base_price_usd = 1.0  # –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã = $1
            elif token_symbol == 'WETH':
                base_price_usd = 2500  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ ETH
            elif token_symbol == 'WBTC':  
                base_price_usd = 40000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ BTC
            elif token_symbol == 'WMATIC':
                base_price_usd = 0.9  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ MATIC
            elif token_symbol == 'AAVE':
                base_price_usd = 100  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ AAVE
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤
        reserve_normalized = reserve_base / (10 ** base_decimals)
        
        # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å = 2 * —Ä–µ–∑–µ—Ä–≤_–±–∞–∑–æ–≤–æ–≥–æ_—Ç–æ–∫–µ–Ω–∞ * —Ü–µ–Ω–∞_–≤_USD
        liquidity = 2 * reserve_normalized * base_price_usd
        
        return liquidity

    def is_stablecoin(self, token_address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–º"""
        if not token_address:
            return False
            
        stablecoins = {
            # Polygon stablecoins
            '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',  # USDC.e
            '0x3c499c542cef5e3811e1192ce70d8cc03d5c3359',  # USDC native
            '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',  # USDT
            '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063',  # DAI
            '0x765277eebeca2e31912c9946eae1021199b39c61',  # DAI (–¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å)
            '0xdab529f40e671a1d4bf91361c21bf9f0c9712ab7',  # BUSD
            '0x4e3decbb3645551b8a19f0ea1678079fcb33fb4c',  # jEUR
            '0xe111178a87a3bff0c8d18decba5798827539ae99',  # EURS
            # Ethereum stablecoins
            '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',  # USDC
            '0xdac17f958d2ee523a2206206994597c13d831ec7',  # USDT
            '0x6b175474e89094c44da98b954eedeac495271d0f',  # DAI
        }
        return token_address.lower() in stablecoins
    
    async def load_v2_combos(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ v2_combos.jsonl –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        combos = []
        try:
            with open('v2_combos.jsonl', 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip():
                        combo = json.loads(line)
                        combos.append(combo)
            self.logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(combos)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–∑ v2_combos.jsonl")
            return combos
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ v2_combos.jsonl: {e}")
            return []

    async def get_all_active_pairs(self, combos: List[Dict] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∏–∑ v2_combos –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        # –ï—Å–ª–∏ combos –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
        if combos is None:
            combos = await self.load_v2_combos()
        
        if not combos:
            self.logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ v2_combos.jsonl!")
            return []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø—Ä—è–º—É—é
        all_pairs = []
        
        for combo in combos:
            # combo —Å–æ–¥–µ—Ä–∂–∏—Ç:
            # - trade: –∞–¥—Ä–µ—Å —Ç–æ—Ä–≥—É–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä WETH)
            # - base: –∞–¥—Ä–µ—Å –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä USDC)
            # - buy: {dex, pair} - –≥–¥–µ –ø–æ–∫—É–ø–∞–µ–º –¥–µ—à–µ–≤–æ
            # - sell: {dex, pair} - –≥–¥–µ –ø—Ä–æ–¥–∞–µ–º –¥–æ—Ä–æ–≥–æ
            
            # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-–æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ DexScreener –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            # –ù–∞–º –Ω—É–∂–Ω–æ –¥–≤–µ –ø–∞—Ä—ã - –æ–¥–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –¥—Ä—É–≥–∞—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            opportunity = {
                # –î–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥—É–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                'trade_token': combo['trade'],
                'base_token': combo['base'],
                
                # –ü–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                'buy_dex': combo['buy']['dex'],
                'buy_pair': combo['buy']['pair'],
                
                # –ü–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                'sell_dex': combo['sell']['dex'],
                'sell_pair': combo['sell']['pair'],
                
                # –≠—Ç–∏ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—É—á–∏–º —á–µ—Ä–µ–∑ ANKR
                'pairAddress': combo['buy']['pair'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º buy pair –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
                'baseToken': {
                    'address': combo['base'],
                    'symbol': 'BASE'  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –ø–æ–∑–∂–µ
                },
                'quoteToken': {
                    'address': combo['trade'],
                    'symbol': 'TRADE'  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –ø–æ–∑–∂–µ
                },
                'dexId': combo['buy']['dex'],
                'chainId': CHAIN,
                'liquidity': {'usd': 0, 'base': 0, 'quote': 0},
                'volume': {'h24': 1},  # –°—Ç–∞–≤–∏–º 1 —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ñ–∏–ª—å—Ç—Ä
                'priceNative': '0',
                'priceUsd': '0',
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
                '_is_v2_combo': True,
                '_combo_data': combo
            }
            all_pairs.append(opportunity)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        dex_stats = {}
        for combo in combos:
            for side in ['buy', 'sell']:
                dex = combo[side]['dex']
                dex_stats[dex] = dex_stats.get(dex, 0) + 1
        
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:")
        self.logger.info(f"   –í—Å–µ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(combos)}")
        self.logger.info(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ DEX:")
        for dex, count in sorted(dex_stats.items(), key=lambda x: x[1], reverse=True):
            self.logger.info(f"      {dex}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        unique_trades = set(c['trade'] for c in combos)
        unique_bases = set(c['base'] for c in combos)
        self.logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(unique_trades)}")
        self.logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(unique_bases)}")
        
        return all_pairs
     
    async def process_v2_combos(self, combos: List[Dict]) -> List[ArbitrageOpportunity]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ v2_combos –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        opportunities = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.combos_scan = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        self.cands_scan = 0   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å–æ —Å–ø—Ä–µ–¥–æ–º > MIN_SPREAD
        self.n_low_spread = 0  # –û—Ç—Å–µ—è–Ω–æ –ø–æ —Å–ø—Ä–µ–¥—É
        self.n_low_liquidity_usd = 0  # –û—Ç—Å–µ—è–Ω–æ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        self.n_nets0 = 0  # –û—Ç—Å–µ—è–Ω–æ –ø–æ net_spread <= 0
        self.n_nonv2 = 0  # –û—Ç—Å–µ—è–Ω–æ –Ω–µ V2 DEX
        self.n_low_spread_onchain = 0  # –û—Ç—Å–µ—è–Ω–æ –ø–æ onchain —Å–ø—Ä–µ–¥—É
        self.skip_bad_reserves_onchain = 0  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Ä–µ–∑–µ—Ä–≤—ã
        self.skip_non_v2_pair = 0  # –ù–µ V2 –ø–∞—Ä—ã
        self.skip_ankr_rate_limit = 0  # ANKR rate limits
        self.skip_address_mismatch = 0  # –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
        
        self.logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(combos)} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
        
        # –®–ê–ì 1: –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏ —Ç–æ–∫–µ–Ω—ã –°–†–ê–ó–£
        unique_pairs = set()
        unique_tokens = set()
        
        for combo in combos:
            unique_pairs.add(combo['buy']['pair'])
            unique_pairs.add(combo['sell']['pair'])
            unique_tokens.add(combo['base'])
            unique_tokens.add(combo['trade'])
        
        self.logger.info(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä: {len(unique_pairs)}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(unique_tokens)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ANKR –ø—Ä–æ–≤–∞–π–¥–µ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
        from config import ANKR_API_KEY
        if not hasattr(self, 'ankr_provider'):
            if ANKR_API_KEY:
                from ankr_reserves import AnkrReservesProvider
                self.ankr_provider = AnkrReservesProvider(ANKR_API_KEY, self.w3, self.logger)
                self.logger.info("‚úÖ ANKR –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                self.ankr_provider = None
                self.logger.warning("‚ö†Ô∏è ANKR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ RPC")
        
        # –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ä–µ–∑–µ—Ä–≤—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –±–∞—Ç—á–∞–º–∏
        self.logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è {len(unique_pairs)} –ø–∞—Ä...")
        all_reserves = {}
        
        if self.ankr_provider:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
            reserves_tuples = await self.ankr_provider.get_reserves_many(list(unique_pairs))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
            for pair, (r0, r1, t0, t1) in reserves_tuples.items():
                all_reserves[pair] = {
                    'reserve0': r0,
                    'reserve1': r1,
                    'token0': t0,
                    'token1': t1
                }
            
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–æ–≤: {len(all_reserves)}/{len(unique_pairs)}")
        else:
            self.logger.warning("‚ö†Ô∏è ANKR –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –®–ê–ì 3: –ü–æ–ª—É—á–∞–µ–º decimals –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å —Ä–µ–∑–µ—Ä–≤–∞–º–∏
        self.logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é decimals –¥–ª—è {len(unique_tokens)} —Ç–æ–∫–µ–Ω–æ–≤...")
        
        if self.ankr_provider:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É decimals –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            decimals_task = self.ankr_provider.get_decimals_many(list(unique_tokens))
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
            decimals_cache = await decimals_task
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            decimals_cache = {}
            for token in unique_tokens:
                decimals_cache[token] = self.get_token_decimals(token)
        
        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ decimals: {len(decimals_cache)}")
        
        # –®–ê–ì 4: –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ë–ï–ó –°–ï–¢–ï–í–´–• –ó–ê–ü–†–û–°–û–í
        self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
        processed = 0
        
        for combo in combos:
            processed += 1
            if processed % 500 == 0:
                self.logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{len(combos)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
            
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                self.combos_scan += 1
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∫—ç—à–∞
                buy_reserves = all_reserves.get(combo['buy']['pair'])
                sell_reserves = all_reserves.get(combo['sell']['pair'])
                
                if not buy_reserves or not sell_reserves:
                    self.skip_bad_reserves_onchain += 1
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NPE
                if not combo.get('base') or not combo.get('trade'):
                    continue
                try:
                    base_addr = combo['base'].lower()
                    trade_addr = combo['trade'].lower()
                except AttributeError:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º decimals –∏–∑ –∫—ç—à–∞
                base_decimals = decimals_cache.get(combo['base'], 18)
                trade_decimals = decimals_cache.get(combo['trade'], 18)
                
                # –î–ª—è buy –ø–∞—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
                buy_token0 = buy_reserves.get('token0', '')
                buy_token1 = buy_reserves.get('token1', '')
                if not buy_token0 or not buy_token1:
                    continue
                    
                if buy_token0.lower() == base_addr:
                    buy_base_reserve = buy_reserves['reserve0']
                    buy_trade_reserve = buy_reserves['reserve1']
                elif buy_reserves.get('token1', '').lower() == base_addr:
                    buy_base_reserve = buy_reserves['reserve1']
                    buy_trade_reserve = buy_reserves['reserve0']
                else:
                    continue
                
                # –î–ª—è sell –ø–∞—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
                sell_token0 = sell_reserves.get('token0', '')
                sell_token1 = sell_reserves.get('token1', '')
                if not sell_token0 or not sell_token1:
                    continue
                    
                if sell_token0.lower() == base_addr:
                    sell_base_reserve = sell_reserves['reserve0']
                    sell_trade_reserve = sell_reserves['reserve1']
                elif sell_reserves.get('token1', '').lower() == base_addr:
                    sell_base_reserve = sell_reserves['reserve1']
                    sell_trade_reserve = sell_reserves['reserve0']
                else:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã
                if any(r == 0 for r in [buy_base_reserve, buy_trade_reserve, sell_base_reserve, sell_trade_reserve]):
                    self.skip_bad_reserves_onchain += 1
                    continue
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤—ã —Å —É—á–µ—Ç–æ–º decimals
                buy_base_decimal = buy_base_reserve / (10 ** base_decimals)
                buy_trade_decimal = buy_trade_reserve / (10 ** trade_decimals)
                sell_base_decimal = sell_base_reserve / (10 ** base_decimals)
                sell_trade_decimal = sell_trade_reserve / (10 ** trade_decimals)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
                buy_price = buy_base_decimal / buy_trade_decimal  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (—Å–∫–æ–ª—å–∫–æ base –∑–∞ 1 trade)
                sell_price = sell_base_decimal / sell_trade_decimal  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                self.combos_scan += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥
                if sell_price <= buy_price:
                    continue  # –ù–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                
                spread = (sell_price - buy_price) / buy_price
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if spread < MIN_SPREAD_PERCENT / 100:
                    self.n_low_spread = getattr(self, 'n_low_spread', 0) + 1
                    continue
                    
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ø—Ä–µ–¥—É)
                self.cands_scan += 1
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ USD
                base_price_usd = BASE_TOKEN_USD_PRICES.get(base_addr, 1.0)
                buy_liquidity_usd = buy_base_decimal * base_price_usd * 2
                sell_liquidity_usd = sell_base_decimal * base_price_usd * 2
                min_liquidity = min(buy_liquidity_usd, sell_liquidity_usd)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                if min_liquidity < MIN_LIQUIDITY_USD:
                    self.n_low_liquidity_usd += 1
                    continue
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LUT –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                optimal_size = 0
                max_profit = 0
                
                if self.lut:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ LUT
                    r = (sell_base_decimal * buy_trade_decimal) / (buy_base_decimal * sell_trade_decimal)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ LUT
                    g_optimal = size_from_lut(self.lut, spread, r)
                    
                    if g_optimal > 0:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
                        L = min(buy_liquidity_usd, sell_liquidity_usd) / base_price_usd
                        optimal_size = L * g_optimal
                        
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
                        max_profit = optimal_size * spread * 0.5  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                if optimal_size > 0:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                    base_symbol = self.get_base_token_symbol(combo['base'])
                    
                    opportunity = ArbitrageOpportunity(
                        token_address=combo['trade'],
                        token_symbol=combo.get('trade_symbol', 'UNKNOWN'),
                        quote_token_address=combo['base'],
                        quote_token_symbol=base_symbol,
                        buy_dex=combo['buy']['dex'],
                        sell_dex=combo['sell']['dex'],
                        buy_price=buy_price,
                        sell_price=sell_price,
                        spread_percent=spread * 100,
                        liquidity_usd=min_liquidity,
                        expected_profit=max_profit,
                        optimal_trade_size=optimal_size,
                        price_impact=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ–∑–∂–µ
                        buy_pair=combo['buy']['pair'],
                        sell_pair=combo['sell']['pair'],
                        buy_router=combo['buy'].get('router'),
                        sell_router=combo['sell'].get('router'),
                        base_token_address=combo['base']
                    )
                    opportunities.append(opportunity)
                    
            except Exception as e:
                if processed <= 10:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {e}")
                continue
        
        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–∑ {len(combos)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
        return opportunities
     
    def calculate_price_impact_amm(self, amount_in: float, reserve_in: float, reserve_out: float, fee_percent: float = 0.3) -> Tuple[float, float]:
        """
        v6.7: –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç price impact –¥–ª—è AMM (Uniswap V2 —Ñ–æ—Ä–º—É–ª–∞)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (amount_out, price_impact_percent)
        """
        if reserve_in <= 0 or reserve_out <= 0 or amount_in <= 0:
            return 0, 0
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ –±–µ–∑ impact
        original_price = reserve_out / reserve_in
        
        # AMM —Ñ–æ—Ä–º—É–ª–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
        fee_multiplier = 1 - (fee_percent / 100)
        amount_in_with_fee = amount_in * fee_multiplier
        
        # –†–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ x*y=k
        # amount_out = (amount_in_with_fee * reserve_out) / (reserve_in + amount_in_with_fee)
        amount_out = (amount_in_with_fee * reserve_out) / (reserve_in + amount_in_with_fee)
        
        # –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–≤–æ–ø–∞
        actual_price = amount_out / amount_in
        
        # Price impact –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        price_impact = ((original_price - actual_price) / original_price) * 100
        
        return amount_out, price_impact
    
        
    async def calculate_real_profit(self, base_amount: float, buy_price: float, sell_price: float,
                                buy_liquidity: float, sell_liquidity: float, buy_dex: str = "", sell_dex: str = "",
                                base_token_symbol: str = "USDC", buy_pair: str = None, sell_pair: str = None,
                                base_token_address: str = None, trade_token_address: str = None,
                                buy_base_reserve: float = 0, buy_quote_reserve: float = 0,      # –ù–û–í–û–ï
                                sell_base_reserve: float = 0, sell_quote_reserve: float = 0) -> Tuple[float, float]:  # –ù–û–í–û–ï
            """v7.3: –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑–µ—Ä–≤–∞–º–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞"""
            # –£–±—Ä–∞–ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ DEX
            buy_dex_fee = get_dex_fee(buy_dex if buy_dex else 'default')
            sell_dex_fee = get_dex_fee(sell_dex if sell_dex else 'default')
            
            # –®–ê–ì 1: –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å —É—á–µ—Ç–æ–º AMM price impact
            # v7.3: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ DEXScreener, –ø–æ—Ç–æ–º –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            if buy_base_reserve > 0 and buy_quote_reserve > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ DEXScreener
                buy_reserve_base = buy_base_reserve
                buy_reserve_trade = buy_quote_reserve
                # –£–±—Ä–∞–ª–∏ –æ—Ç–ª–∞–¥–∫—É - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è
            elif buy_pair:
                reserves_data = await self.get_pair_reserves(buy_pair)
                self.logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_pair_reserves –¥–ª—è {buy_pair}: {reserves_data}")
                if reserves_data and base_token_address and trade_token_address:
                    base_decimals = self.get_token_decimals(base_token_address)
                    trade_decimals = self.get_token_decimals(trade_token_address)
                    
                    # –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
                    self.logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –†–ï–ó–ï–†–í–û–í –ü–û–ö–£–ü–ö–ò:")
                    self.logger.info(f"   token0 –≤ –ø–∞—Ä–µ: {reserves_data['token0']}")
                    self.logger.info(f"   token1 –≤ –ø–∞—Ä–µ: {reserves_data['token1']}")
                    self.logger.info(f"   base_token (WETH/USDC): {base_token_address}")
                    self.logger.info(f"   trade_token (AAVE/–¥—Ä.): {trade_token_address}")
                    self.logger.info(f"   reserve0 (—Å—ã—Ä–æ–π): {reserves_data['reserve0']}")
                    self.logger.info(f"   reserve1 (—Å—ã—Ä–æ–π): {reserves_data['reserve1']}")
                    
                    if reserves_data['token0'].lower() == base_token_address.lower():
                        buy_reserve_base = reserves_data['reserve0'] / (10 ** base_decimals)
                        buy_reserve_trade = reserves_data['reserve1'] / (10 ** trade_decimals)
                        self.logger.info(f"   ‚úÖ token0 = base, token1 = trade")
                    else:
                        buy_reserve_base = reserves_data['reserve1'] / (10 ** base_decimals)
                        buy_reserve_trade = reserves_data['reserve0'] / (10 ** trade_decimals)
                        self.logger.info(f"   ‚úÖ token0 = trade, token1 = base")
                
                    self.logger.info(f"   –ò—Ç–æ–≥–æ: base_reserve={buy_reserve_base:.2f}, trade_reserve={buy_reserve_trade:.2f}")
                    self.logger.debug(f"–†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –ø–æ–∫—É–ø–∫–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞: base={buy_reserve_base:.2f}, trade={buy_reserve_trade:.2f}")
                else:
                    # –ù–µ—Ç –æ–Ωchain –¥–∞–Ω–Ω—ã—Ö - —Å–∫–∏–ø–∞–µ–º —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                    self.logger.debug("–ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–æ–≤ –¥–ª—è –ø–∞—Ä—ã –ø–æ–∫—É–ø–∫–∏ - —Å–∫–∏–ø–∞–µ–º")
                    return 0, 0, 0
            
            tokens_received, buy_impact = self.calculate_price_impact_amm(
                    base_amount,
                    buy_reserve_base,
                    buy_reserve_trade,
                    buy_dex_fee
                )
            
            # –®–ê–ì 2: –ü—Ä–æ–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å —É—á–µ—Ç–æ–º AMM price impact
            # v7.3: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ DEXScreener, –ø–æ—Ç–æ–º –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            if sell_base_reserve > 0 and sell_quote_reserve > 0:
                # DEXScreener —É–∂–µ –¥–∞—ë—Ç –≤ —Ç–æ–∫–µ–Ω–∞—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                sell_reserve_base = sell_base_reserve or 0.0
                sell_reserve_trade = sell_quote_reserve or 0.0
                # –£–±—Ä–∞–ª–∏ –æ—Ç–ª–∞–¥–∫—É - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è
            elif sell_pair:

                reserves_data = await self.get_pair_reserves(sell_pair)
                if reserves_data and base_token_address and trade_token_address:
                    base_decimals = self.get_token_decimals(base_token_address)
                    trade_decimals = self.get_token_decimals(trade_token_address)
                    
                    # –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
                    self.logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –†–ï–ó–ï–†–í–û–í –ü–†–û–î–ê–ñ–ò:")
                    self.logger.info(f"   token0 –≤ –ø–∞—Ä–µ: {reserves_data['token0']}")
                    self.logger.info(f"   token1 –≤ –ø–∞—Ä–µ: {reserves_data['token1']}")
                    self.logger.info(f"   base_token (WETH/USDC): {base_token_address}")
                    self.logger.info(f"   trade_token (AAVE/–¥—Ä.): {trade_token_address}")
                    self.logger.info(f"   reserve0 (—Å—ã—Ä–æ–π): {reserves_data['reserve0']}")
                    self.logger.info(f"   reserve1 (—Å—ã—Ä–æ–π): {reserves_data['reserve1']}")
                    
                    if reserves_data['token0'].lower() == trade_token_address.lower():
                        sell_reserve_trade = reserves_data['reserve0'] / (10 ** trade_decimals)
                        sell_reserve_base = reserves_data['reserve1'] / (10 ** base_decimals)
                        self.logger.info(f"   ‚úÖ token0 = trade, token1 = base")
                    else:
                        sell_reserve_trade = reserves_data['reserve1'] / (10 ** trade_decimals)
                        sell_reserve_base = reserves_data['reserve0'] / (10 ** base_decimals)
                        self.logger.info(f"   ‚úÖ token0 = base, token1 = trade")
                
                    self.logger.info(f"   –ò—Ç–æ–≥–æ: trade_reserve={sell_reserve_trade:.2f}, base_reserve={sell_reserve_base:.2f}")
                    self.logger.debug(f"–†–µ–∑–µ—Ä–≤—ã –ø—Ä–æ–¥–∞–∂–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞: base={sell_reserve_base:.2f}, trade={sell_reserve_trade:.2f}")
            else:
                # –ù–µ—Ç –æ–Ωchain –¥–∞–Ω–Ω—ã—Ö - —Å–∫–∏–ø–∞–µ–º —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                self.logger.debug("–ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–æ–≤ –¥–ª—è –ø–∞—Ä—ã –ø—Ä–æ–¥–∞–∂–∏ - —Å–∫–∏–ø–∞–µ–º")
                return 0, 0, 0
            
            base_received, sell_impact = self.calculate_price_impact_amm(
                tokens_received,
                sell_reserve_trade,
                sell_reserve_base,
                sell_dex_fee
            )
            
            # –®–ê–ì 3: –í—ã—á–∏—Ç–∞–µ–º Flash Loan fee
            flash_loan_fee = base_amount * (get_flash_loan_fee() / 100)
            base_after_flash_fee = base_received - flash_loan_fee
            
            # –®–ê–ì 4: –í—ã—á–∏—Ç–∞–µ–º –≥–∞–∑
            gas_cost_usd = get_gas_cost(CHAIN)
            if base_token_symbol in ["WMATIC", "WETH"]:
                token_prices = {"WMATIC": 0.5, "WETH": 2300}
                token_price = token_prices.get(base_token_symbol, 1)
                gas_cost_in_base = gas_cost_usd / token_price
            else:
                gas_cost_in_base = gas_cost_usd
            
            # –ò–¢–û–ì–û–í–ê–Ø –ü–†–ò–ë–´–õ–¨ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ–æ—Ä–º—É–ª—É —á—Ç–æ –∏ LUT
            # expected_out_base = base_received (–ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–æ–ø–∞)
            # repay_base = base_amount + flash_loan_fee
            # min_profit_base = gas_cost_in_base
            expected_out_base = base_received
            repay_base = base_amount + flash_loan_fee
            min_profit_base = gas_cost_in_base

            net_profit = expected_out_base - repay_base - min_profit_base
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
            if base_token_symbol in ["WMATIC", "WETH"]:
                token_prices = {"WMATIC": 0.5, "WETH": 2300}
                net_profit_usd = net_profit * token_prices.get(base_token_symbol, 1)
            else:
                net_profit_usd = net_profit
            
            total_impact = buy_impact + sell_impact
            
            return net_profit_usd, total_impact
        
    async def find_optimal_trade_size(self, opportunity: Dict, base_token_symbol: str = "USDC") -> Tuple[float, float, float]:
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º LUT –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å ANKR —Ä–µ–∑–µ—Ä–≤–∞–º–∏"""
        
        if not self.lut:
            self.logger.error("LUT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return 0, 0, 0
        
        buy_price = opportunity.get('buy_price', 0)
        sell_price = opportunity.get('sell_price', 0)
        
        # –ï—Å–ª–∏ —Ü–µ–Ω—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Å–ø—Ä–µ–¥–∞
        if buy_price == 0 or sell_price == 0:
            spread_decimal = opportunity['spread'] / 100
            buy_price = 1.0
            sell_price = buy_price * (1 + spread_decimal)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥ –¥–ª—è LUT
        spread = (sell_price - buy_price) / buy_price
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú ANKR –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ï–ó–ï–†–í–û–í
        from config import ANKR_API_KEY
        
        buy_pair = opportunity.get('buy_pair')
        sell_pair = opportunity.get('sell_pair')
        
        if buy_pair and sell_pair:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–∑–æ–ª–≤–∞
            resolved_buy_from_factory = False
            resolved_sell_from_factory = False
            
            # v7.1.2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ V2-–ø–∞—Ä—ã
            is_buy_v2 = await self.is_v2_pair(buy_pair)
            is_sell_v2 = await self.is_v2_pair(sell_pair)
            
            # –ï—Å–ª–∏ –ø–∞—Ä–∞ –±—ã–ª–∞ —Ä–µ–∑–æ–ª–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É - —Å—á–∏—Ç–∞–µ–º –µ—ë V2
            if resolved_buy_from_factory:
                is_buy_v2 = True
            if resolved_sell_from_factory:
                is_sell_v2 = True
            
            if not is_buy_v2 or not is_sell_v2:
                self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º non-V2 –ø–∞—Ä—ã: buy_v2={is_buy_v2}, sell_v2={is_sell_v2}")
                self.logger.debug(f"   buy_pair={buy_pair}, sell_pair={sell_pair}")
                self.logger.debug(f"   resolved_buy={resolved_buy_from_factory}, resolved_sell={resolved_sell_from_factory}")
                self.skip_non_v2_pair += 1
                return 0, 0, 0
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ANKR –ø—Ä–æ–≤–∞–π–¥–µ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            if not hasattr(self, 'ankr_provider'):
                if ANKR_API_KEY:
                    from ankr_reserves import AnkrReservesProvider
                    self.ankr_provider = AnkrReservesProvider(ANKR_API_KEY, self.w3, self.logger)
                    self.logger.info("‚úÖ ANKR –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    self.ankr_provider = None
                    self.logger.warning("‚ö†Ô∏è ANKR_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ RPC")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã —á–µ—Ä–µ–∑ ANKR –∏–ª–∏ fallback –Ω–∞ RPC
            if self.ankr_provider:
                # –ë–∞—Ç—á –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ANKR
                reserves_map = await self.ankr_provider.get_reserves_batch([buy_pair, sell_pair])
                buy_reserves = reserves_map.get(buy_pair, {})
                sell_reserves = reserves_map.get(sell_pair, {})
                
               # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è buy_pair, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ factory
                if not buy_reserves or 'reserve0' not in buy_reserves:
                    self.logger.warning(f"‚ö†Ô∏è Buy pair {buy_pair[:10]} failed, trying factory lookup...")
                    # –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–∞–º–æ–π DS-–ø–∞—Ä—ã
                    try:
                        pair_contract = self.w3.eth.contract(
                            address=Web3.to_checksum_address(buy_pair),
                            abi=json.loads('[{"constant":true,"inputs":[],"name":"token0","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"token1","outputs":[{"name":"","type":"address"}],"type":"function"}]')
                        )
                        ds_token0 = pair_contract.functions.token0().call()
                        ds_token1 = pair_contract.functions.token1().call()
                        self.logger.info(f"   DS pair={buy_pair} ‚Üí factory.getPair(tokenA={ds_token0},tokenB={ds_token1}) (dex={opportunity.get('buy_dex', 'unknown')})")
                        self.logger.info(f"   DS pair tokens: token0={ds_token0}, token1={ds_token1}")
                        if len(ds_token0) != 42 or len(ds_token1) != 42:
                            self.logger.warning(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –∞–¥—Ä–µ—Å–∞! –ò—Å–ø–æ–ª—å–∑—É—é –∏–∑ opportunity")
                            ds_token0 = opportunity.get('base_token_address', ds_token0)
                            ds_token1 = opportunity.get('trade_token_address', ds_token1)
                    except:
                        ds_token0 = opportunity.get('base_token_address')
                        ds_token1 = opportunity.get('trade_token_address')
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞—Ä—ã —á–µ—Ä–µ–∑ factory
                    buy_dex = opportunity.get('buy_dex')
                    from config import DEX_CONFIG
                    buy_router = opportunity.get('buy_router') or DEX_CONFIG.get(buy_dex, {}).get('router')
                    self.logger.info(f"   üîç Trying factory resolution: buy_router={buy_router}, buy_dex={buy_dex}")
                    if buy_router and buy_dex:
                        # –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–û–õ–ù–´–ï –∞–¥—Ä–µ—Å–∞ –∏–∑ opportunity, –∞ –Ω–µ –∏–∑ DS-–ø–∞—Ä—ã!
                        full_token0 = Web3.to_checksum_address(opportunity.get('base_token_address', ds_token0))
                        full_token1 = Web3.to_checksum_address(opportunity.get('trade_token_address', ds_token1))
                        
                        self.logger.info(f"   factory args: tokenA={full_token0}, tokenB={full_token1}")
                        
                        # –ü—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å —á–µ—Ä–µ–∑ CREATE2 BUY
                        from config import DEX_CONFIG
                        dex_config = DEX_CONFIG.get(buy_dex, {})
                        self.logger.debug(f"   DEX config for {buy_dex}: {dex_config}")
                        if 'init_code_pair_hash' in dex_config and 'factory' in dex_config:
                            computed_pair = self.compute_pair_address_create2(
                                dex_config['factory'],
                                full_token0,
                                full_token1,
                                dex_config['init_code_pair_hash']
                            )
                            self.logger.info(f"   üìê CREATE2 –≤—ã—á–∏—Å–ª–∏–ª –∞–¥—Ä–µ—Å: {computed_pair}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                            bytecode = self.w3.eth.get_code(Web3.to_checksum_address(computed_pair))
                            if len(bytecode) > 2:
                                correct_buy_pair = computed_pair
                                self.logger.info(f"   ‚úÖ CREATE2 –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π (–µ—Å—Ç—å bytecode)")
                                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã
                                buy_reserves = await self.get_pair_reserves(correct_buy_pair)
                                if buy_reserves:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–∞—Ä—ã
                                    opportunity['buy_pair'] = correct_buy_pair
                                    buy_pair = correct_buy_pair
                                    self.logger.info(f"   ‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ CREATE2")
                                    resolved_buy_from_factory = True
                            else:
                                self.logger.warning(f"   ‚ö†Ô∏è CREATE2 –∞–¥—Ä–µ—Å –ø—É—Å—Ç–æ–π (–Ω–µ—Ç bytecode), fallback –Ω–∞ factory.getPair")
                                factory_pair_data = await self.get_v2_reserves_by_router(
                                    buy_router,
                                    full_token0,
                                    full_token1,
                                    buy_dex
                                )
                                if factory_pair_data and 'pair' in factory_pair_data:
                                    correct_buy_pair = factory_pair_data['pair']
                                    self.logger.info(f"‚úÖ Factory gave correct pair: {correct_buy_pair}")
                                    if correct_buy_pair.lower() != buy_pair.lower():
                                        self.logger.info(f"   üîÑ –ü–û–î–ú–ï–ù–ê –ê–î–†–ï–°–ê: old={buy_pair} ‚Üí new={correct_buy_pair}")
                                    else:
                                        self.logger.info(f"   ‚ÑπÔ∏è –ê–¥—Ä–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)")
                                    buy_reserves = {
                                        'reserve0': factory_pair_data['reserve0'],
                                        'reserve1': factory_pair_data['reserve1'],
                                        'token0': factory_pair_data['token0'],
                                        'token1': factory_pair_data['token1']
                                    }
                                    opportunity['buy_pair'] = correct_buy_pair
                                    buy_pair = correct_buy_pair
                                    self.logger.info(f"‚úÖ Buy pair updated via factory.getPair")
                                    resolved_buy_from_factory = True
                        else:
                            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                            factory_pair_data = await self.get_v2_reserves_by_router(
                                buy_router,
                                full_token0,
                                full_token1,
                                buy_dex
                            )
                        if factory_pair_data and 'pair' in factory_pair_data:
                            correct_buy_pair = factory_pair_data['pair']
                            self.logger.info(f"‚úÖ Factory gave correct pair: {correct_buy_pair}")
                            if correct_buy_pair.lower() != buy_pair.lower():
                                self.logger.info(f"   üîÑ –ü–û–î–ú–ï–ù–ê –ê–î–†–ï–°–ê: old={buy_pair} ‚Üí new={correct_buy_pair}")
                            else:
                                self.logger.info(f"   ‚ÑπÔ∏è –ê–¥—Ä–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)")
                            buy_reserves = {
                                'reserve0': factory_pair_data['reserve0'],
                                'reserve1': factory_pair_data['reserve1'],
                                'token0': factory_pair_data['token0'],
                                'token1': factory_pair_data['token1']
                            }
                           # –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–∞—Ä—ã –í–ï–ó–î–ï
                            opportunity['buy_pair'] = correct_buy_pair
                            buy_pair = correct_buy_pair  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                            self.logger.info(f"‚úÖ Buy pair updated: old={opportunity.get('buy_pair')[:10]} ‚Üí new={correct_buy_pair[:10]}")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
                            assert buy_pair == correct_buy_pair, "Address not updated!"
                            self.logger.info(f"   resolved_v2_from_factory = True")
                            resolved_buy_from_factory = True
                
                # –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è sell_pair
                if not sell_reserves or 'reserve0' not in sell_reserves:
                    self.logger.warning(f"‚ö†Ô∏è Sell pair {sell_pair[:10]} failed, trying factory lookup...")
                    # –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–∞–º–æ–π DS-–ø–∞—Ä—ã
                    try:
                        pair_contract = self.w3.eth.contract(
                            address=Web3.to_checksum_address(sell_pair),
                            abi=json.loads('[{"constant":true,"inputs":[],"name":"token0","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"token1","outputs":[{"name":"","type":"address"}],"type":"function"}]')
                        )
                        ds_token0 = pair_contract.functions.token0().call()
                        ds_token1 = pair_contract.functions.token1().call()
                        self.logger.info(f"   DS pair={sell_pair} ‚Üí factory.getPair(tokenA={ds_token0},tokenB={ds_token1}) (dex={opportunity.get('sell_dex', 'unknown')})")
                        self.logger.info(f"   DS pair tokens: token0={ds_token0}, token1={ds_token1}")
                        if len(ds_token0) != 42 or len(ds_token1) != 42:
                            self.logger.warning(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –∞–¥—Ä–µ—Å–∞! –ò—Å–ø–æ–ª—å–∑—É—é –∏–∑ opportunity")
                            ds_token0 = opportunity.get('base_token_address', ds_token0)
                            ds_token1 = opportunity.get('trade_token_address', ds_token1)
                    except:
                        ds_token0 = opportunity.get('base_token_address')
                        ds_token1 = opportunity.get('trade_token_address')
                   
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞—Ä—ã —á–µ—Ä–µ–∑ factory
                    sell_dex = opportunity.get('sell_dex')
                    from config import DEX_CONFIG
                    sell_router = opportunity.get('sell_router') or DEX_CONFIG.get(sell_dex, {}).get('router')
                    self.logger.info(f"   üîç Trying factory resolution: sell_router={sell_router}, sell_dex={sell_dex}")
                    if sell_router and sell_dex:
                        # –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–û–õ–ù–´–ï –∞–¥—Ä–µ—Å–∞ –∏–∑ opportunity, –∞ –Ω–µ –∏–∑ DS-–ø–∞—Ä—ã!
                        full_token0 = Web3.to_checksum_address(opportunity.get('base_token_address', ds_token0))
                        full_token1 = Web3.to_checksum_address(opportunity.get('trade_token_address', ds_token1))
                        
                        self.logger.info(f"   factory args: tokenA={full_token0}, tokenB={full_token1}")
                        
                        # –ü—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å —á–µ—Ä–µ–∑ CREATE2 SELL
                        from config import DEX_CONFIG
                        dex_config = DEX_CONFIG.get(sell_dex, {})
                        self.logger.debug(f"   DEX config for {sell_dex}: {dex_config}")
                        if 'init_code_pair_hash' in dex_config and 'factory' in dex_config:
                            computed_pair = self.compute_pair_address_create2(
                                dex_config['factory'],
                                full_token0,
                                full_token1,
                                dex_config['init_code_pair_hash']
                            )
                            self.logger.info(f"   üìê CREATE2 –≤—ã—á–∏—Å–ª–∏–ª –∞–¥—Ä–µ—Å: {computed_pair}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                            bytecode = self.w3.eth.get_code(Web3.to_checksum_address(computed_pair))
                            if len(bytecode) > 2:
                                correct_sell_pair = computed_pair
                                self.logger.info(f"   ‚úÖ CREATE2 –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π (–µ—Å—Ç—å bytecode)")
                                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã
                                sell_reserves = await self.get_pair_reserves(correct_sell_pair)
                                if sell_reserves:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–∞—Ä—ã
                                    opportunity['sell_pair'] = correct_sell_pair
                                    sell_pair = correct_sell_pair
                                    self.logger.info(f"   ‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ CREATE2")
                                    resolved_sell_from_factory = True
                            else:
                                self.logger.warning(f"   ‚ö†Ô∏è CREATE2 –∞–¥—Ä–µ—Å –ø—É—Å—Ç–æ–π (–Ω–µ—Ç bytecode), fallback –Ω–∞ factory.getPair")
                                factory_pair_data = await self.get_v2_reserves_by_router(
                                    sell_router,
                                    full_token0,
                                    full_token1,
                                    sell_dex
                                )
                                if factory_pair_data and 'pair' in factory_pair_data:
                                    correct_sell_pair = factory_pair_data['pair']
                                    self.logger.info(f"‚úÖ Factory gave correct pair: {correct_sell_pair}")
                                    if correct_sell_pair.lower() != sell_pair.lower():
                                        self.logger.info(f"   üîÑ –ü–û–î–ú–ï–ù–ê –ê–î–†–ï–°–ê: old={sell_pair} ‚Üí new={correct_sell_pair}")
                                    else:
                                        self.logger.info(f"   ‚ÑπÔ∏è –ê–¥—Ä–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)")
                                    sell_reserves = {
                                        'reserve0': factory_pair_data['reserve0'],
                                        'reserve1': factory_pair_data['reserve1'],
                                        'token0': factory_pair_data['token0'],
                                        'token1': factory_pair_data['token1']
                                    }
                                    opportunity['sell_pair'] = correct_sell_pair
                                    sell_pair = correct_sell_pair
                                    self.logger.info(f"‚úÖ Sell pair updated via factory.getPair")
                                    resolved_sell_from_factory = True
                        else:
                            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                            factory_pair_data = await self.get_v2_reserves_by_router(
                                sell_router,
                                full_token0,
                                full_token1,
                                sell_dex
                            )
                        if factory_pair_data and 'pair' in factory_pair_data:
                            correct_sell_pair = factory_pair_data['pair']
                            self.logger.info(f"‚úÖ Factory gave correct pair: {correct_sell_pair}")
                            if correct_sell_pair.lower() != sell_pair.lower():
                                self.logger.info(f"   üîÑ –ü–û–î–ú–ï–ù–ê –ê–î–†–ï–°–ê: old={sell_pair} ‚Üí new={correct_sell_pair}")
                            else:
                                self.logger.info(f"   ‚ÑπÔ∏è –ê–¥—Ä–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)")
                            sell_reserves = {
                                'reserve0': factory_pair_data['reserve0'],
                                'reserve1': factory_pair_data['reserve1'],
                                'token0': factory_pair_data['token0'],
                                'token1': factory_pair_data['token1']
                            }
                            # –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–∞—Ä—ã –í–ï–ó–î–ï
                            opportunity['sell_pair'] = correct_sell_pair
                            sell_pair = correct_sell_pair  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                            self.logger.info(f"‚úÖ Sell pair updated: old={opportunity.get('sell_pair')[:10]} ‚Üí new={correct_sell_pair[:10]}")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
                            assert sell_pair == correct_sell_pair, "Address not updated!"
                            self.logger.info(f"   resolved_v2_from_factory = True")
                            resolved_sell_from_factory = True
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ANKR vs RPC
                ankr_success = 0
                rpc_fallback = 0
                
                # –ï—Å–ª–∏ ANKR –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑–µ—Ä–≤—ã - –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π RPC
                if not buy_reserves or 'reserve0' not in buy_reserves:
                    self.logger.warning(f"‚ö†Ô∏è ANKR FAIL –¥–ª—è buy_pair {buy_pair} -> –∏—Å–ø–æ–ª—å–∑—É–µ–º RPC fallback")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ rate limit –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    self.skip_ankr_rate_limit = getattr(self, 'skip_ankr_rate_limit', 0) + 1
                    buy_reserves = await self.get_pair_reserves(buy_pair)
                    rpc_fallback += 1
                    if not buy_reserves:
                        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –Ω–∏ —á–µ—Ä–µ–∑ ANKR, –Ω–∏ —á–µ—Ä–µ–∑ RPC –¥–ª—è buy_pair")
                        self.skip_bad_reserves_onchain += 1
                        return 0, 0, 0
                else:
                    ankr_success += 1
                    self.logger.debug(f"‚úÖ ANKR SUCCESS –¥–ª—è buy_pair")
                    
                if not sell_reserves or 'reserve0' not in sell_reserves:
                    self.logger.warning(f"‚ö†Ô∏è ANKR FAIL –¥–ª—è sell_pair {sell_pair} -> –∏—Å–ø–æ–ª—å–∑—É–µ–º RPC fallback")
                    sell_reserves = await self.get_pair_reserves(sell_pair)
                    rpc_fallback += 1
                    if not sell_reserves:
                        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –Ω–∏ —á–µ—Ä–µ–∑ ANKR, –Ω–∏ —á–µ—Ä–µ–∑ RPC –¥–ª—è sell_pair")
                        self.skip_bad_reserves_onchain += 1
                        return 0, 0, 0
                else:
                    ankr_success += 1
                    self.logger.debug(f"‚úÖ ANKR SUCCESS –¥–ª—è sell_pair")
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.logger.info(f"üìä ANKR —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ {ankr_success}/2, RPC fallback {rpc_fallback}/2")
                
                # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if not hasattr(self, 'ankr_stats'):
                    self.ankr_stats = {'success': 0, 'fail': 0}
                self.ankr_stats['success'] += ankr_success
                self.ankr_stats['fail'] += rpc_fallback
                    
                self.logger.debug(f"üì° –†–µ–∑–µ—Ä–≤—ã –ø–æ–ª—É—á–µ–Ω—ã (ANKR + RPC fallback)")
                
                # ========== –ù–û–í–´–ô –ö–û–î: –§–ò–õ–¨–¢–† –ü–û ONCHAIN –°–ü–†–ï–î–£ ==========
                # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
                if buy_reserves and sell_reserves:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
                    base_token = opportunity.get('base_token_address')
                    trade_token = opportunity.get('trade_token_address', opportunity.get('token_address'))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑–µ—Ä–≤—ã –ø–æ–ª—É—á–µ–Ω—ã
                    if ('reserve0' in buy_reserves and 'reserve1' in buy_reserves and 
                        'reserve0' in sell_reserves and 'reserve1' in sell_reserves):
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
                        # –î–ª—è buy –ø–∞—Ä—ã
                        buy_token0_is_base = buy_reserves.get('token0', '').lower() == base_token.lower()
                        buy_price_onchain = self.calculate_mid_price_from_reserves(
                            buy_reserves['reserve0'],
                            buy_reserves['reserve1'],
                            self.get_token_decimals(buy_reserves.get('token0')),
                            self.get_token_decimals(buy_reserves.get('token1')),
                            base_is_token0=buy_token0_is_base
                        )
                        
                        # –î–ª—è sell –ø–∞—Ä—ã  
                        sell_token0_is_base = sell_reserves.get('token0', '').lower() == base_token.lower()
                        sell_price_onchain = self.calculate_mid_price_from_reserves(
                            sell_reserves['reserve0'],
                            sell_reserves['reserve1'],
                            self.get_token_decimals(sell_reserves.get('token0')),
                            self.get_token_decimals(sell_reserves.get('token1')),
                            base_is_token0=sell_token0_is_base
                        )
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º onchain —Å–ø—Ä–µ–¥
                        if buy_price_onchain > 0 and sell_price_onchain > 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            if sell_price_onchain <= buy_price_onchain:
                                # –¶–µ–Ω—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã - –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ buy –∏ sell
                                buy_price_onchain, sell_price_onchain = sell_price_onchain, buy_price_onchain
                                buy_reserves, sell_reserves = sell_reserves, buy_reserves
                                
                                # –§–ª–∞–≥ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ DEX
                                flipped = True
                                self.logger.debug(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç —Ü–µ–Ω: sell_price <= buy_price")
                            else:
                                flipped = False
                            
                            spread_onchain = (sell_price_onchain - buy_price_onchain) / buy_price_onchain * 100
                            
                            self.logger.debug(f"üìä Onchain —Å–ø—Ä–µ–¥: {spread_onchain:.3f}% (buy: {buy_price_onchain:.6f}, sell: {sell_price_onchain:.6f})")
                        
                            # –§–ò–õ–¨–¢–†–£–ï–ú –ø–æ onchain —Å–ø—Ä–µ–¥—É
                            if spread_onchain < MIN_SPREAD_PERCENT:
                                self.logger.debug(f"‚ùå –û—Ç—Å–µ—è–Ω–æ –ø–æ onchain —Å–ø—Ä–µ–¥—É: {spread_onchain:.3f}% < {MIN_SPREAD_PERCENT}%")
                                self.n_low_spread_onchain = getattr(self, 'n_low_spread_onchain', 0) + 1
                                return 0, 0, 0, False
                            
                            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º USD –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ onchain —Ä–µ–∑–µ—Ä–≤–æ–≤
                            if buy_reserves and 'reserve0' in buy_reserves and 'reserve1' in buy_reserves:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ä–µ–∑–µ—Ä–≤ - –±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                                if buy_reserves.get('token0', '').lower() == base_token.lower():
                                    base_reserve_raw = buy_reserves['reserve0']
                                else:
                                    base_reserve_raw = buy_reserves['reserve1']
                                
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º USD –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                                base_decimals = self.get_token_decimals(base_token)
                                liquidity_usd = self.calculate_liquidity_usd(
                                    base_reserve_raw, 
                                    base_token, 
                                    base_decimals
                                )
                                
                                if liquidity_usd < MIN_LIQUIDITY_USD:
                                    self.logger.debug(f"‚ùå –û—Ç—Å–µ—è–Ω–æ –ø–æ USD –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: ${liquidity_usd:.0f} < ${MIN_LIQUIDITY_USD}")
                                    self.n_low_liquidity_usd = getattr(self, 'n_low_liquidity_usd', 0) + 1
                                    return 0, 0, 0, False
                                
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–µ–¥ –¥–ª—è LUT
                            spread = spread_onchain / 100  # LUT –æ–∂–∏–¥–∞–µ—Ç —Å–ø—Ä–µ–¥ –≤ –¥–æ–ª—è—Ö
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä–µ opportunity
                            opportunity['buy_price'] = buy_price_onchain
                            opportunity['sell_price'] = sell_price_onchain
                        else:
                            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å onchain —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏")
# ========== –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ==========
                
            else:
                # Fallback –Ω–∞ –ø—Ä—è–º—ã–µ RPC –≤—ã–∑–æ–≤—ã
                buy_reserves = await self.get_pair_reserves(buy_pair)
                sell_reserves = await self.get_pair_reserves(sell_pair)
                self.logger.debug(f"üì° –†–µ–∑–µ—Ä–≤—ã —á–µ—Ä–µ–∑ RPC –ø–æ–ª—É—á–µ–Ω—ã")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            base_token = opportunity.get('base_token_address')
            base_decimals = self.get_token_decimals(base_token)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è buy –ø–∞—Ä—ã
            if buy_reserves:
                # –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –≤ –ø–∞—Ä–µ –±–∞–∑–æ–≤—ã–π
                # –î–ª—è —ç—Ç–æ–≥–æ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ token0/token1
                try:
                    pair_contract = self.w3.eth.contract(
                        address=Web3.to_checksum_address(buy_pair),
                        abi=json.loads('[{"constant":true,"inputs":[],"name":"token0","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"token1","outputs":[{"name":"","type":"address"}],"type":"function"}]')
                    )
                    token0 = pair_contract.functions.token0().call()
                    token1 = pair_contract.functions.token1().call()
                    
                    self.logger.debug(f"Buy pair tokens: token0={token0}, token1={token1}")
                    self.logger.debug(f"Looking for base_token={base_token}")
                    
                    if token0.lower() == base_token.lower():
                        b1 = buy_reserves.get('reserve0', 0) / (10 ** base_decimals)
                        self.logger.debug(f"Buy: base is token0, b1={b1:.2f} {base_token_symbol}")
                    elif token1.lower() == base_token.lower():
                        b1 = buy_reserves.get('reserve1', 0) / (10 ** base_decimals)
                        self.logger.debug(f"Buy: base is token1, b1={b1:.2f} {base_token_symbol}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Buy pair address mismatch: base token {base_token} not found in pair")
                        return 0, 0, 0
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Cannot get buy pair tokens (non-V2?): {e}")
                    return 0, 0, 0
            else:
                b1 = 0
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è sell –ø–∞—Ä—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
            if sell_reserves:
                try:
                    pair_contract = self.w3.eth.contract(
                        address=Web3.to_checksum_address(sell_pair),
                        abi=json.loads('[{"constant":true,"inputs":[],"name":"token0","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"token1","outputs":[{"name":"","type":"address"}],"type":"function"}]')
                    )
                    token0 = pair_contract.functions.token0().call()
                    token1 = pair_contract.functions.token1().call()
                    
                    self.logger.debug(f"Sell pair tokens: token0={token0}, token1={token1}")
                    self.logger.debug(f"Looking for base_token={base_token}")
                    
                    if token0.lower() == base_token.lower():
                        b2 = sell_reserves.get('reserve0', 0) / (10 ** base_decimals)
                        self.logger.debug(f"Sell: base is token0, b2={b2:.2f} {base_token_symbol}")
                    elif token1.lower() == base_token.lower():
                        b2 = sell_reserves.get('reserve1', 0) / (10 ** base_decimals)
                        self.logger.debug(f"Sell: base is token1, b2={b2:.2f} {base_token_symbol}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Sell pair address mismatch: base token {base_token} not found in pair")
                        return 0, 0, 0
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Cannot get sell pair tokens (non-V2?): {e}")
                    return 0, 0, 0
            else:
                b2 = 0
                    
            self.logger.debug(f"–û–Ωchain —Ä–µ–∑–µ—Ä–≤—ã (ANKR): b1={b1:.2f} {base_token_symbol}, b2={b2:.2f} {base_token_symbol}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –ø–∞—Ä - —Å–∫–∏–ø–∞–µ–º
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –ø–∞—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ - —Å–∫–∏–ø–∞—é")
            self.skip_bad_reserves_onchain += 1
            return 0, 0, 0
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–æ–≤
        if b1 <= 0 or b2 <= 0:
            self.logger.warning(f"üö´ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –æ–Ωchain: b1={b1}, b2={b2} - —Å–∫–∏–ø–∞—é (–Ω–µ –≤—ã–∑—ã–≤–∞—é LUT)")
            self.skip_bad_reserves_onchain += 1
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å–µ–∏–≤–∞–Ω–∏—è
            if hasattr(opportunity, 'symbol'):
                self.rejection_reasons[opportunity['symbol']] = 'onchain_reserves_failed'
            return 0, 0, 0
                
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ($500 –≤ –±–∞–∑–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ)
        MIN_RESERVE_USD = 500
        base_price_usd = self.BASE_TOKEN_USD_PRICES.get(
            opportunity.get('base_token_address', '').lower(), 1.0
        )
        min_reserve_units = MIN_RESERVE_USD / base_price_usd
                
        if b1 < min_reserve_units or b2 < min_reserve_units:
            self.logger.debug(f"üö´ –†–µ–∑–µ—Ä–≤—ã < ${MIN_RESERVE_USD}: b1=${b1*base_price_usd:.0f}, b2=${b2*base_price_usd:.0f}")
            return 0, 0, 0
                
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ LUT (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö BASE —Ç–æ–∫–µ–Ω–∞)
        optimal_size = size_from_lut(self.lut, spread, b1, b2)
                
        if optimal_size > 0:
            self.logger.debug(f"LUT –≤–µ—Ä–Ω—É–ª–∞: size={optimal_size:.2f}, spread={spread:.4f}, b1={b1:.0f}, b2={b2:.0f}")
                
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
        buy_dex = opportunity.get('buy_dex', 'default')
        sell_dex = opportunity.get('sell_dex', 'default')
                
        # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –ø—Ä–∏–±—ã–ª–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        total_fees = get_dex_fee(buy_dex) + get_dex_fee(sell_dex) + get_flash_loan_fee()
        net_spread = spread * 100 - total_fees  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                
        if net_spread <= 0:
            expected_profit = 0
            price_impact = 0
        else:
            expected_profit = optimal_size * (net_spread / 100) * base_price_usd
            price_impact = 5.0  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
                
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ —Ñ–ª–∞–≥ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        flipped_flag = flipped if 'flipped' in locals() else False
        return optimal_size, expected_profit, price_impact, flipped_flag

        
    async def find_arbitrage_opportunities(self, all_pairs: List[Dict]) -> List[ArbitrageOpportunity]:
        """v6.3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å WMATIC/WETH –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º
        """
        # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.combos_scan = 0
        self.cands_scan = 0
        self.n_low_spread = 0
        self.n_low_liquidity_usd = 0  # –ù–û–í–û–ï: —Å—á–µ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        self.n_low_spread_onchain = 0  # –£–∂–µ –µ—Å—Ç—å
        self.all_spreads_before_v2 = []  # –°–ø—Ä–µ–¥—ã –¥–æ V2-—Ñ–∏–ª—å—Ç—Ä–∞
        self.all_spreads_after_v2 = []   # –°–ø—Ä–µ–¥—ã –ø–æ—Å–ª–µ V2-—Ñ–∏–ª—å—Ç—Ä–∞
        self.rejection_reasons = {}  # –ü—Ä–∏—á–∏–Ω—ã –æ—Ç—Å–µ–∏–≤–∞–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        self.n_nets0 = 0
        self.n_econ = 0
        self.n_bad_res = 0
        self.n_nonv2 = 0
        self.n_no_router = 0
        self.skip_bad_reserves_onchain = 0
        self.skip_non_v2_pair = 0
        self.skip_ankr_rate_limit = 0
        self.skip_address_mismatch = 0
    
        token_pairs = defaultdict(list)
        skipped_dex = set()
        
        # DEBUG: –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        debug_stats = {
            'pairs_same_tokens': 0,
            'pairs_both_base': 0,  # v6.3: –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –±–∞–∑–æ–≤—ã–µ
            'pairs_no_base': 0,    # v6.3: –Ω–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            'pairs_no_router': 0,
            'pairs_low_liquidity': 0,
            'pairs_processed': 0
        }
        
        
        for pair in all_pairs:
            base = pair.get('baseToken', {})
            quote = pair.get('quoteToken', {})
            
            # –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –≥–¥–µ base –∏ quote –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            if base.get('address', '').lower() == quote.get('address', '').lower():
                debug_stats['pairs_same_tokens'] += 1
                continue
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤
            volume_24h = float(pair.get('volume', {}).get('h24', 0))
            if volume_24h < MIN_VOLUME_24H:
                debug_stats['low_volume'] = debug_stats.get('low_volume', 0) + 1
                continue
            
            # –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã —Ç–∏–ø–∞ USDC-WMATIC –∏–ª–∏ WETH-USDT - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞!
            base_addr = base.get('address', '')
            quote_addr = quote.get('address', '')
            if self.is_stablecoin(base_addr) and self.is_stablecoin(quote_addr):
                debug_stats['pairs_both_base'] += 1  # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –ø–æ—Ç–æ–º –≤ pairs_stable_stable
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º DEX ID
            dex_id = pair.get('dexId', '').lower()
            pair_address = pair.get('pairAddress', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è DEX –µ—Å–ª–∏ —ç—Ç–æ factory –∞–¥—Ä–µ—Å
            if dex_id.startswith('0x') and len(dex_id) == 42:
                # –≠—Ç–æ factory –∞–¥—Ä–µ—Å, –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π DEX
                found_dex = None
                for dex_name, config in self.dex_config.items():
                    if config.get('factory', '').lower() == dex_id:
                        found_dex = dex_name
                        break
                
                if found_dex:
                    dex_id = found_dex
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π factory
                    skipped_dex.add(dex_id)
                    continue
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ DEX
            if dex_id not in self.enabled_dexes:
                skipped_dex.add(dex_id)
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é DEX
            dex_info = self.dex_config.get(dex_id)
            if not dex_info:
                continue
                
            router_address = dex_info['router']
            
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ DEX
            if dex_id not in self.enabled_dexes:
                skipped_dex.add(dex_id)
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–æ—É—Ç–µ—Ä–∞
            if not router_address:
                debug_stats['pairs_no_router'] += 1
                skipped_dex.add(dex_id)
                continue
            
            # v6.4: –ò—Å–ø–æ–ª—å–∑—É–µ–º priceUsd –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è Flash Loan
            if self.is_base_token(quote.get('address')):
                trade_token = base
                base_token = quote
                base_token_symbol = self.get_base_token_symbol(quote.get('address'))
                is_inverted = True  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∑–µ—Ä–≤—ã –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
            elif self.is_base_token(base.get('address')):
                trade_token = quote
                base_token = base
                base_token_symbol = self.get_base_token_symbol(base.get('address'))
                is_inverted = False  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∑–µ—Ä–≤—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –±–∞–∑–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ
            base_in_pair = pair.get('baseToken', {})
            quote_in_pair = pair.get('quoteToken', {})

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –±–∞–∑–æ–≤—ã–π
            if is_inverted:
                # –ë–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω - —ç—Ç–æ quote –≤ –ø–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º priceQuote
                price_in_base = float(pair.get('priceQuote', 0))
            else:
                # –ë–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω - —ç—Ç–æ base –≤ –ø–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º priceNative
                price_native = float(pair.get('priceNative', 0))
                # priceNative –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ quote –∑–∞ 1 base, –Ω–∞–º –Ω—É–∂–Ω–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                price_in_base = 1 / price_native if price_native > 0 else 0

            # Fallback –Ω–∞ USD –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π —Ü–µ–Ω—ã
            if price_in_base <= 0:
                price_usd = float(pair.get('priceUsd', 0))
                # –¶–µ–Ω—ã –±–∞–∑–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ USD
                base_prices_usd = {
                    '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174': 1.0,    # USDC.e
                    '0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359': 1.0,    # USDC
                    '0xc2132D05D31c914a87C6611C10748AEb04B58e8F': 1.0,    # USDT
                    '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063': 1.0,    # DAI
                    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270': 0.5,    # WMATIC (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                    '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619': 2300,   # WETH (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                }
                base_token_price_usd = base_prices_usd.get(base_token.get('address', '').lower(), 1.0)
                price_in_base = price_usd / base_token_price_usd
            
            
            if price_in_base <= 0:
                continue
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç fake/scam —Ç–æ–∫–µ–Ω–æ–≤)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º BASE_TOKENS –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            VERIFIED_BASE_TOKENS = {addr.lower() for addr in BASE_TOKENS.get(CHAIN, {}).keys()}
            
            if base_token.get('address', '').lower() not in VERIFIED_BASE_TOKENS:
                self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {base_token.get('symbol')} ({base_token.get('address')})")
                continue
                
            key = f"{trade_token.get('address')}|{base_token.get('address')}"
            
            liquidity = float(pair.get('liquidity', {}).get('usd', 0))
            
            
            if liquidity < MIN_LIQUIDITY_USD:
                debug_stats['pairs_low_liquidity'] += 1
                continue
                
                
            if liquidity >= MIN_LIQUIDITY_USD:
                debug_stats['pairs_processed'] += 1
                token_pairs[key].append({
                    'symbol': trade_token.get('symbol'),
                    'trade_token_address': trade_token.get('address'),
                    'base_token_address': base_token.get('address'),
                    'base_token_symbol': base_token_symbol,  # v6.3: –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
                    'dex': dex_id if dex_id else f"unknown_{pair_address[-6:]}",
                    'pair_address': pair_address,
                    'price': price_in_base,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ü–µ–Ω–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ, –∞ –Ω–µ –≤ USD
                    'liquidity': liquidity,
                    # DEXScreener —É–∂–µ –¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤—ã –≤ —Ç–æ–∫–µ–Ω–∞—Ö!
                    'base_reserve': float(pair.get('liquidity', {}).get('base', 0)) if not is_inverted else float(pair.get('liquidity', {}).get('quote', 0)),
                    'quote_reserve': float(pair.get('liquidity', {}).get('quote', 0)) if not is_inverted else float(pair.get('liquidity', {}).get('base', 0)),
                    'volume_24h': float(pair.get('volume', {}).get('h24', 0)),
                    'is_inverted': is_inverted,
                    'router': router_address  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
                })
        
        
        # DEBUG: –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä:")
        self.logger.info(f"   –ü–∞—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏: {debug_stats['pairs_same_tokens']}")
        self.logger.info(f"   –ü–∞—Ä—ã –±–∞–∑–∞-–±–∞–∑–∞ (USDC-USDT –∏ —Ç.–¥.): {debug_stats['pairs_both_base']}")
        self.logger.info(f"   –ü–∞—Ä—ã –±–µ–∑ –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {debug_stats['pairs_no_base']}")
        self.logger.info(f"   –ü–∞—Ä—ã —Å –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é: {debug_stats['pairs_low_liquidity']}")
        self.logger.info(f"   –ü–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ–±—ä–µ–º–æ–º (<${MIN_VOLUME_24H}): {debug_stats.get('low_volume', 0)}")
        self.logger.info(f"   –û—Ç—Å–µ—è–Ω–æ: –Ω–µ—Ç —Ä–æ—É—Ç–µ—Ä–∞ (–ø–æ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É): {debug_stats['pairs_no_router']}")
        self.logger.info(f"   –ü–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {debug_stats['pairs_processed']}")
        
        self.logger.info(f"–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä —Ç–æ–∫–µ–Ω–æ–≤: {len(token_pairs)}")
        
        opportunities = []
        
        # DEBUG: –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        debug_opportunities = {
            'tokens_with_single_dex': 0,
            'low_spread_count': 0,
            'no_profit_count': 0,
            'total_combinations': 0,
            'ds_spreads_all': []  # –ù–û–í–û–ï: –≤—Å–µ DS-—Å–ø—Ä–µ–¥—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        }
        
        for token_key, dex_list in token_pairs.items():
            if len(dex_list) < 2:
                debug_opportunities['tokens_with_single_dex'] += 1
                continue
                
            valid_dexes = [d for d in dex_list if d['price'] > 0]
            
            if len(valid_dexes) < 2:
                continue
            
            # v6.3: –ë–µ—Ä–µ–º —Å–∏–º–≤–æ–ª –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ DEX
            base_token_symbol = valid_dexes[0].get('base_token_symbol', 'USDC')
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ DEX –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            for i, buy_dex in enumerate(valid_dexes):
                for sell_dex in valid_dexes[i+1:]:
                    debug_opportunities['total_combinations'] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ DEX —Ä–∞–∑–Ω—ã–µ
                    if buy_dex['dex'] == sell_dex['dex']:
                        continue

                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                    if buy_dex['price'] < sell_dex['price']:
                        min_price_dex = buy_dex
                        max_price_dex = sell_dex
                    else:
                        min_price_dex = sell_dex
                        max_price_dex = buy_dex
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥ –ó–î–ï–°–¨
                    spread = (max_price_dex['price'] - min_price_dex['price']) / min_price_dex['price'] * 100
                    self.all_spreads_scan.append(spread)  # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–ø—Ä–µ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –æ–±–æ–∏—Ö DEX –µ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä—ã
                    if not min_price_dex.get('router') or not max_price_dex.get('router'):
                        continue
                    
                    
                    # –î–û–ë–ê–í–ò–¢–¨ –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
                    if spread > 0.5 and min_price_dex.get('router') == max_price_dex.get('router'):
                        self.logger.warning(
                            f"üîç –ê–ù–ê–õ–ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ü–ê–†–´:\n"
                            f"   –¢–æ–∫–µ–Ω: {min_price_dex['symbol']}\n"
                            f"   DEX1: {min_price_dex['dex']} | –ü–∞—Ä–∞: {min_price_dex['pair_address']}\n"
                            f"   DEX2: {max_price_dex['dex']} | –ü–∞—Ä–∞: {max_price_dex['pair_address']}\n"
                            f"   –û–¥–∏–Ω —Ä–æ—É—Ç–µ—Ä: {min_price_dex.get('router')}\n"
                            f"   –ü–∞—Ä—ã {'–†–ê–ó–ù–´–ï' if min_price_dex['pair_address'] != max_price_dex['pair_address'] else '–û–î–ò–ù–ê–ö–û–í–´–ï'}\n"
                            f"   –¶–µ–Ω—ã: ${min_price_dex['price']:.6f} ‚Üí ${max_price_dex['price']:.6f}\n"
                            f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${min_price_dex['liquidity']:,.0f} ‚Üí ${max_price_dex['liquidity']:,.0f}"
                        )
    
                    # –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
                    if spread > 0.5:  # –î–ª—è —Å–ø—Ä–µ–¥–æ–≤ –±–æ–ª—å—à–µ 0.5%
                        self.logger.info(
                            f"üìç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {min_price_dex['symbol']} | –°–ø—Ä–µ–¥ {spread:.2f}% | "
                            f"{min_price_dex['dex']}‚Üí{max_price_dex['dex']}\n"
                            f"   –†–æ—É—Ç–µ—Ä—ã: {min_price_dex.get('router', 'none')[-6:]} ‚Üí "
                            f"{max_price_dex.get('router', 'none')[-6:]}\n"
                            f"   –ü–∞—Ä—ã: {min_price_dex['pair_address'][-6:]} ‚Üí "
                            f"{max_price_dex['pair_address'][-6:]}\n"
                            f"   –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä: {'‚ùå –î–ê' if min_price_dex.get('router') == max_price_dex.get('router') else '‚úÖ –ù–ï–¢'}"
                        )
                    
                    # ===== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ê–†–ë–ò–¢–†–ê–ñ–ê =====
                    # –û—Ç–ª–∞–¥–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è 
                    
                    # –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ü–û–î–•–û–î: –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!
                    # –§–∏–ª—å—Ç—Ä —Å–ø—Ä–µ–¥–∞
                    self.combos_scan += 1  # –°—á–∏—Ç–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å–ø—Ä–µ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    if not hasattr(self, 'all_spreads_scan'):
                        self.all_spreads_scan = []
                    self.all_spreads_scan.append(spread)

                    # –£–î–ê–õ–ï–ù–û: –†–∞–Ω–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ DS-—Å–ø—Ä–µ–¥—É - —Ç–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å–ª–µ onchain
                    # if spread < MIN_SPREAD_PERCENT:
                    #     debug_opportunities['low_spread_count'] += 1
                    #     self.n_low_spread += 1
                    #     continue

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–µ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–æ –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º
                    debug_opportunities['ds_spreads_all'].append(spread)  # –ù–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫
                        
                    self.cands_scan += 1  # –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ø—Ä–µ–¥—É
    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–µ DEX - —ç—Ç–æ V2 (–¥–ª—è LUT)
                    buy_dex_type = self.dex_config.get(min_price_dex['dex'], {}).get('type', 'UNKNOWN')
                    sell_dex_type = self.dex_config.get(max_price_dex['dex'], {}).get('type', 'UNKNOWN')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å–µ–∏–≤–∞–Ω–∏—è
                    rejection_reason = 'ok'
                    if buy_dex_type != 'V2' or sell_dex_type != 'V2':
                        rejection_reason = 'non-V2'
                    elif min_price_dex['symbol'] in self.rejection_reasons:
                        rejection_reason = self.rejection_reasons[min_price_dex['symbol']]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–µ–¥ –î–û V2-—Ñ–∏–ª—å—Ç—Ä–∞
                    self.all_spreads_before_v2.append((spread, min_price_dex['symbol'], min_price_dex['dex'], max_price_dex['dex'], rejection_reason))
                    
                    if buy_dex_type != 'V2' or sell_dex_type != 'V2':
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-V2 –ø–∞—Ä—ã (V3/Algebra –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è LUT)
                        self.n_nonv2 += 1
                        continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–µ–¥ –ü–û–°–õ–ï V2-—Ñ–∏–ª—å—Ç—Ä–∞
                    self.all_spreads_after_v2.append((spread, min_price_dex['symbol'], min_price_dex['dex'], max_price_dex['dex']))
                    
                    # –î–∞–∂–µ –º–∞–ª—ã–π —Å–ø—Ä–µ–¥ –º–æ–∂–µ—Ç –¥–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –Ω–∞ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ!
                        
                    # –û–¢–õ–ê–î–ö–ê —Ä–µ–∑–µ—Ä–≤–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ LUT
                    if spread > 0.5:  # –î–ª—è —Å–ø—Ä–µ–¥–æ–≤ –±–æ–ª—å—à–µ 0.5%
                        self.logger.debug(f"–†–µ–∑–µ—Ä–≤—ã –¥–ª—è {min_price_dex['symbol']}: buy_base={min_price_dex.get('base_reserve', 0):.0f}, sell_base={max_price_dex.get('base_reserve', 0):.0f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ onchain —Å–ø—Ä–µ–¥–∞
                    if 'flipped' in locals() and flipped:
                        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ buy –∏ sell DEX
                        opportunity_data = {
                            'spread': spread,
                            'buy_price': sell_price_onchain if 'sell_price_onchain' in locals() else max_price_dex['price'],
                            'sell_price': buy_price_onchain if 'buy_price_onchain' in locals() else min_price_dex['price'],
                            'buy_liquidity': max_price_dex['liquidity'],
                            'sell_liquidity': min_price_dex['liquidity'],
                            'buy_dex': max_price_dex['dex'],
                            'sell_dex': min_price_dex['dex'],
                            'buy_pair': max_price_dex['pair_address'],
                            'sell_pair': min_price_dex['pair_address'],
                            'base_token_address': min_price_dex['base_token_address'],
                            'trade_token_address': min_price_dex['trade_token_address'],
                            'buy_base_reserve': max_price_dex.get('base_reserve', 0),
                            'buy_quote_reserve': max_price_dex.get('quote_reserve', 0),
                            'sell_base_reserve': min_price_dex.get('base_reserve', 0),
                            'sell_quote_reserve': min_price_dex.get('quote_reserve', 0),
                            'buy_router': max_price_dex.get('router'),
                            'sell_router': min_price_dex.get('router')
                        }
                        self.logger.info(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç: buy={opportunity_data['buy_dex']}, sell={opportunity_data['sell_dex']}")
                    else:
                        opportunity_data = {
                            'spread': spread,
                            'buy_price': buy_price_onchain if 'buy_price_onchain' in locals() else min_price_dex['price'],
                            'sell_price': sell_price_onchain if 'sell_price_onchain' in locals() else max_price_dex['price'],
                            'buy_liquidity': min_price_dex['liquidity'],
                            'sell_liquidity': max_price_dex['liquidity'],
                            'buy_dex': min_price_dex['dex'],
                            'sell_dex': max_price_dex['dex'],
                            'buy_pair': min_price_dex['pair_address'],
                            'sell_pair': max_price_dex['pair_address'],
                            'base_token_address': min_price_dex['base_token_address'],
                            'trade_token_address': min_price_dex['trade_token_address'],
                            'buy_base_reserve': min_price_dex.get('base_reserve', 0),
                            'buy_quote_reserve': min_price_dex.get('quote_reserve', 0),
                            'sell_base_reserve': max_price_dex.get('base_reserve', 0),
                            'sell_quote_reserve': max_price_dex.get('quote_reserve', 0),
                            'buy_router': min_price_dex.get('router'),
                            'sell_router': max_price_dex.get('router')
                        }
                    
                    # v7.3: –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–º–≤–æ–ª –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤
                    opportunity_data['buy_pair'] = min_price_dex['pair_address']
                    opportunity_data['sell_pair'] = max_price_dex['pair_address']
                    opportunity_data['base_token_address'] = min_price_dex['base_token_address']
                    opportunity_data['trade_token_address'] = min_price_dex['trade_token_address']
                    
                    result = await self.find_optimal_trade_size(
                        opportunity_data, base_token_symbol
                    )
                    
                    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
                    if len(result) == 4:
                        optimal_size, expected_profit, price_impact, flipped = result
                    else:
                        optimal_size, expected_profit, price_impact = result
                        flipped = False
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if 'flipped' in locals() and flipped:
                        self.logger.info(f"üîç –ü–ï–†–ï–í–û–†–û–¢: ds_buy={min_price_dex['dex']}, ds_sell={max_price_dex['dex']} ‚Üí —Ç–µ–ø–µ—Ä—å buy={max_price_dex['dex']}, sell={min_price_dex['dex']}")
                        
                    # –ï—Å–ª–∏ find_optimal_trade_size –≤–µ—Ä–Ω—É–ª–∞ 0 –∏–∑-–∑–∞ –ø–ª–æ—Ö–∏—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤ - —Å–∫–∏–ø–∞–µ–º
                    if optimal_size == 0 and expected_profit == 0 and price_impact == 0:
                        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Ä–µ–∑–µ—Ä–≤—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                        continue
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ net_spread (–µ—Å–ª–∏ size = 0, –∑–Ω–∞—á–∏—Ç net_spread <= 0)
                    if optimal_size <= 0:
                        self.n_nets0 += 1

                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º—É–ª–∞ –≥–æ–≤–æ—Ä–∏—Ç 0 - –∑–Ω–∞—á–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ—Ç
                    if optimal_size <= 0:
                        debug_opportunities['no_profit_count'] += 1
                        self.logger.debug(f"   –†–∞–∑–º–µ—Ä = 0 –¥–ª—è {min_price_dex['symbol']}: net_spread <= 0")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                    
                    if expected_profit < MIN_PROFIT_USD:
                        debug_opportunities['no_profit_count'] += 1
                        # DEBUG: –í—ã–≤–æ–¥–∏–º –±–ª–∏–∑–∫–∏–µ –∫ –ø—Ä–∏–±—ã–ª–∏
                        if expected_profit > MIN_PROFIT_USD * 0.5 and MIN_PROFIT_USD > 0:
                            self.logger.debug(f"   –ë–ª–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å ${expected_profit:.3f} –¥–ª—è {min_price_dex['symbol']}")
                        # –í–°–ï–ì–î–ê –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–æ—Ñ–∏—Ç–Ω—ã–µ, –¥–∞–∂–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
                        continue  # –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ MIN_PROFIT_USD
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–µ –ø–∞—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —á–∏—Ç–∞—é—Ç—Å—è
                    if min_price_dex['pair_address'] and max_price_dex['pair_address']:
                        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–∞—Ä—ã –≤–∞–ª–∏–¥–Ω—ã–µ
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º bytecode –æ–±–µ–∏—Ö –ø–∞—Ä
                            min_pair_code = self.w3.eth.get_code(Web3.to_checksum_address(min_price_dex['pair_address']))
                            max_pair_code = self.w3.eth.get_code(Web3.to_checksum_address(max_price_dex['pair_address']))
                            
                            if len(min_pair_code) <= 2 or len(max_pair_code) <= 2:
                                self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è {min_price_dex['symbol']}")
                                continue
                        except:
                            continue    
                        
                    # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ—Ñ–∏—Ç–Ω–æ—Å—Ç—å –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    if optimal_size <= 0 or expected_profit < MIN_PROFIT_USD:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–æ—Ñ–∏—Ç–Ω—ã–µ
                    
                    opportunities.append(ArbitrageOpportunity(
                            token_symbol=min_price_dex['symbol'],
                            token_address=min_price_dex['trade_token_address'],
                            quote_token_address=min_price_dex['base_token_address'],
                            quote_token_symbol=base_token_symbol,  # v6.3: –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                            buy_dex=min_price_dex['dex'],
                            sell_dex=max_price_dex['dex'],
                            buy_price=min_price_dex['price'],
                            sell_price=max_price_dex['price'],
                            spread_percent=spread,
                            optimal_trade_size=optimal_size,
                            expected_profit=expected_profit,
                            buy_liquidity=min_price_dex['liquidity'],
                            sell_liquidity=max_price_dex['liquidity'],
                            price_impact_percent=price_impact,
                            buy_dex_pair=min_price_dex['pair_address'],
                            sell_dex_pair=max_price_dex['pair_address'],
                            buy_router=self.dex_config.get(min_price_dex['dex'], {}).get('router') or min_price_dex['router'],
                            sell_router=self.dex_config.get(max_price_dex['dex'], {}).get('router') or max_price_dex['router']
                        ))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
        opportunities.sort(
            key=lambda x: (
                x.expected_profit
            ), 
            reverse=True
)
        
        # DEBUG: –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
        self.logger.info(f"   –¢–æ–∫–µ–Ω—ã —Å –æ–¥–Ω–∏–º DEX: {debug_opportunities['tokens_with_single_dex']}")
        self.logger.info(f"   –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {debug_opportunities['total_combinations']}")
        self.logger.info(f"   –û—Ç—Å–µ—è–Ω–æ: —Å–ø—Ä–µ–¥ (<{MIN_SPREAD_PERCENT}%): {debug_opportunities['low_spread_count']}")
        self.logger.info(f"   –ù–µ—Ç –ø—Ä–∏–±—ã–ª–∏ (<${MIN_PROFIT_USD}): {debug_opportunities['no_profit_count']}")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if MIN_PROFIT_USD < 0:  # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
            self.logger.info(f"üìä –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò: –ü–æ–∫–∞–∑–∞–Ω—ã –¥–∞–∂–µ —É–±—ã—Ç–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            self.logger.info(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∏—Å—Å–∏–π")
        
        
    
        # –ù–ï –≤—ã–≤–æ–¥–∏–º –ø–æ–∫–∞ —Ç—É—Ç "–ø—Ä–æ—Ñ–∏—Ç–Ω—ã–µ", —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ü–û–°–õ–ï
        # real_profitable –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ–∑–∂–µ, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥-—á–µ–∫–∞
        
        return opportunities
        
    async def prepare_universal_params(self, opportunity: ArbitrageOpportunity) -> Tuple[str, int, bytes]:
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0
        if opportunity.optimal_trade_size <= 0:
            self.logger.error(f"–û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ —Å size=0!")
            self.logger.error(f"  –¢–æ–∫–µ–Ω: {opportunity.token_symbol}")
            self.logger.error(f"  –°–ø—Ä–µ–¥: {opportunity.spread_percent:.3f}%")
            raise ValueError("Trade size is 0")
        
        # v7.0: –£–º–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è Flash Loan
        flash_loan_asset, flash_loan_symbol, swap_routes = await self.choose_flash_loan_asset(opportunity)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if flash_loan_asset is None:
            self.logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è Flash Loan")
            raise ValueError("No suitable flash loan token")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–ø–æ–≤ –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
        first_swap = swap_routes[0]
        second_swap = swap_routes[1]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Å Web3.to_checksum_address
        swap_token_in_1 = Web3.to_checksum_address(first_swap.token_in)
        swap_token_out_1 = Web3.to_checksum_address(first_swap.token_out)
        swap_token_in_2 = Web3.to_checksum_address(second_swap.token_in)
        swap_token_out_2 = Web3.to_checksum_address(second_swap.token_out)

        first_dex = first_swap.dex
        first_router = first_swap.router
        second_dex = second_swap.dex
        second_router = second_swap.router
        
        # ‚ö†Ô∏è –§–æ—Ä—Å–∏–º –ø–æ—Ä—è–¥–æ–∫ buy ‚Üí sell
        if first_dex != opportunity.buy_dex:
            # –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ first/second
            first_swap, second_swap = second_swap, first_swap

            swap_token_in_1,  swap_token_out_1  = first_swap.token_in,  first_swap.token_out
            swap_token_in_2,  swap_token_out_2  = second_swap.token_in, second_swap.token_out
            first_dex, first_router             = first_swap.dex,       first_swap.router
            second_dex, second_router           = second_swap.dex,      second_swap.router

        self.logger.debug(f"DEBUG: Using first_dex={first_dex}, first_router={first_router}")
        self.logger.debug(f"DEBUG: Using second_dex={second_dex}, second_router={second_router}")


        self.logger.info(f"üìç –ú–∞—Ä—à—Ä—É—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:")
        self.logger.info(f"   Flash Loan: {flash_loan_symbol}")
        self.logger.info(f"   –°–≤–æ–ø 1: {first_dex} ({swap_token_in_1[-6:]} ‚Üí {swap_token_out_1[-6:]})")
        self.logger.info(f"   –°–≤–æ–ø 2: {second_dex} ({swap_token_in_2[-6:]} ‚Üí {swap_token_out_2[-6:]})")
        
        # –ü–æ–ª—É—á–∞–µ–º decimals –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        base_decimals = self.get_token_decimals(flash_loan_asset)
        
        # –†–∞–∑–º–µ—Ä –∑–∞–π–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ decimals
        loan_amount = int(opportunity.optimal_trade_size * (10 ** base_decimals))
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä loan –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏  
        MIN_FLASH_STEP_BASE = 1e-6  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.000001 WETH (–ø–æ–¥–±–µ—Ä–∏ –ø–æ–¥ —Å–≤–æ—é –±–∞–∑—É)
        MIN_FLASH_LOAN = int(MIN_FLASH_STEP_BASE * (10 ** base_decimals))
        
        if loan_amount < MIN_FLASH_LOAN:
            # –ï—Å–ª–∏ LUT –≤–µ—Ä–Ω—É–ª size=0, –∑–Ω–∞—á–∏—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –Ω–µ–≤—ã–≥–æ–¥–Ω–æ - –ù–ï –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, –∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if opportunity.optimal_trade_size <= 0:
                self.logger.warning(f"üö´ LUT –≤–µ—Ä–Ω—É–ª size=0, —Å–¥–µ–ª–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –Ω–µ–≤—ã–≥–æ–¥–Ω–∞")
                raise ValueError("Trade not profitable according to LUT")
            # –ò–Ω–∞—á–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ –º–∏–Ω–∏–º—É–º–∞
            self.logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä {loan_amount/(10**base_decimals):.8f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ {MIN_FLASH_STEP_BASE}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é")
            loan_amount = MIN_FLASH_LOAN
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã DEX
        buy_dex_type = self.dex_config.get(first_dex, {}).get('type', 'V2')
        sell_dex_type = self.dex_config.get(second_dex, {}).get('type', 'V2')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ—É—Ç–µ—Ä—ã –µ—Å—Ç—å
        if not first_router or not second_router:
            self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–æ—É—Ç–µ—Ä—ã!")
            self.logger.error(f"   First router: {first_router}")
            self.logger.error(f"   Second router: {second_router}")
            raise ValueError("Missing router addresses")
        # –î–û–ë–ê–í–ò–¢–¨ –û–¢–õ–ê–î–ö–£:
        self.logger.debug(f"DEBUG: Opportunity buy_dex={opportunity.buy_dex}, buy_router={opportunity.buy_router}")
        self.logger.debug(f"DEBUG: Opportunity sell_dex={opportunity.sell_dex}, sell_router={opportunity.sell_router}")
        self.logger.debug(f"DEBUG: Using first_dex={first_dex}, first_router={first_router}")
        self.logger.debug(f"DEBUG: Using second_dex={second_dex}, second_router={second_router}") 

        
        # Deadline –¥–ª—è —Å–≤–æ–ø–æ–≤
        deadline = self.w3.eth.get_block('latest')['timestamp'] + 300  # +5 –º–∏–Ω—É—Ç
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ decimals
        flash_loan_fee_amount = int(loan_amount * get_flash_loan_fee() / 100)
        # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0 - –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        min_amount_out = 0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        
        # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        swap_data_list = []
        routers = []
        tokens = []
        
        # –°–í–û–ü 1: Flash Loan —Ç–æ–∫–µ–Ω -> –î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω
        self.logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–ø–∞ 1: {Web3.to_checksum_address(swap_token_in_1)[-6:]} -> {Web3.to_checksum_address(swap_token_out_1)[-6:]} –Ω–∞ {first_dex} (—Ç–∏–ø: {buy_dex_type})")
        self.logger.info(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—É—Ç–µ—Ä: {first_router}")
        
        if buy_dex_type == 'V2' or buy_dex_type == 'UNKNOWN':
            # V2 swap –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π - –ø—Ä–æ–±—É–µ–º V2
            buy_calldata = CalldataBuilder.build_v2_swap(
                router=first_router,
                amount_in=loan_amount,
                amount_out_min=0,
                path=[swap_token_in_1, swap_token_out_1],
                to=self.contract.address,
                deadline=deadline
            )
        elif buy_dex_type == 'V3':
            # V3 swap
            buy_calldata = CalldataBuilder.build_v3_swap(
                router=first_router,
                token_in=swap_token_in_1,
                token_out=swap_token_out_1,
                fee=3000,
                recipient=self.contract.address,
                deadline=deadline,
                amount_in=loan_amount,
                amount_out_min=0
            )
        elif buy_dex_type == 'ALGEBRA':
            # Algebra swap
            buy_calldata = CalldataBuilder.build_algebra_swap(
                router=first_router,
                token_in=swap_token_in_1,
                token_out=swap_token_out_1,
                recipient=self.contract.address,
                deadline=deadline,
                amount_in=loan_amount,
                amount_out_min=0
            )
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é V2
            buy_calldata = CalldataBuilder.build_v2_swap(
                router=first_router,
                amount_in=loan_amount,
                amount_out_min=0,
                path=[swap_token_in_1, swap_token_out_1],
                to=self.contract.address,
                deadline=deadline
            )
        
        swap_data_list.append(buy_calldata)
        routers.append(Web3.to_checksum_address(first_router))
        tokens.append(Web3.to_checksum_address(swap_token_in_1))
        
        # –°–í–û–ü 2: –î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω -> Flash Loan —Ç–æ–∫–µ–Ω
        self.logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–ø–∞ 2: {Web3.to_checksum_address(swap_token_in_2)[-6:]} ‚Üí {Web3.to_checksum_address(swap_token_out_2)[-6:]} –Ω–∞ {second_dex} (—Ç–∏–ø: {sell_dex_type})")
        self.logger.info(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—É—Ç–µ—Ä: {second_router}")
        
        # –ü–æ–ª—É—á–∞–µ–º decimals
        intermediate_decimals = self.get_token_decimals(swap_token_out_1)  # TRADE
        # base_decimals —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤—ã—à–µ
        
        # --- –í–ê–ñ–ù–û: —Å—á–∏—Ç–∞–µ–º –ø–æ –†–ï–ó–ï–†–í–ê–ú V2, –±–µ–∑ USD-—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
        # 1) –í—ã—Ö–æ–¥ –ü–ï–†–í–û–ì–û —Å–≤–æ–ø–∞ –ø–æ buy-–ø–∞—Ä–µ (BASE -> TRADE)
        buy_res = await self.get_v2_reserves_by_router(
            router_addr=first_router,
            tokenA=swap_token_in_1,
            tokenB=swap_token_out_1,
            dex_name=first_dex
        )
        if not buy_res:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã buy-–ø–∞—Ä—ã (router‚Üífactory.getPair) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å")
            return None
        
        base_addr  = Web3.to_checksum_address(swap_token_in_1)   # BASE (flash loan asset)
        trade_addr = Web3.to_checksum_address(swap_token_out_1)  # TRADE
        if buy_res['token0'].lower() == base_addr.lower():
            r_in_base_raw, r_out_trade_raw = buy_res['reserve0'], buy_res['reserve1']
        else:
            r_in_base_raw, r_out_trade_raw = buy_res['reserve1'], buy_res['reserve0']
        
        r_in_base_dec   = r_in_base_raw   / (10 ** base_decimals)
        r_out_trade_dec = r_out_trade_raw / (10 ** intermediate_decimals)
        amount_in_base_dec = loan_amount / (10 ** base_decimals)
        
        buy_fee_pct = get_dex_fee(first_dex)  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –Ω–∞–ø—Ä. 0.3
        trade_out_dec, buy_impact = self.calculate_price_impact_amm(
            amount_in=amount_in_base_dec,
            reserve_in=r_in_base_dec,
            reserve_out=r_out_trade_dec,
            fee_percent=buy_fee_pct
        )
        
        # 2) –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –í–¢–û–†–û–ì–û —Å–≤–æ–ø–∞ –ø–æ sell-–ø–∞—Ä–µ (TRADE -> BASE)
        sell_res = await self.get_v2_reserves_by_router(
            router_addr=second_router,
            tokenA=swap_token_in_2,
            tokenB=swap_token_out_2,
            dex_name=second_dex
        )
        if not sell_res:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã sell-–ø–∞—Ä—ã (router‚Üífactory.getPair) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å")
            return None
        
        if sell_res['token0'].lower() == trade_addr.lower():
            r_in_trade2_raw, r_out_base2_raw = sell_res['reserve0'], sell_res['reserve1']
        else:
            r_in_trade2_raw, r_out_base2_raw = sell_res['reserve1'], sell_res['reserve0']
        
        r_in_trade2_dec = r_in_trade2_raw / (10 ** intermediate_decimals)
        r_out_base2_dec = r_out_base2_raw / (10 ** base_decimals)
        
        sell_fee_pct = get_dex_fee(second_dex)  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        base_out_dec, sell_impact = self.calculate_price_impact_amm(
            amount_in=trade_out_dec,
            reserve_in=r_in_trade2_dec,
            reserve_out=r_out_base2_dec,
            fee_percent=sell_fee_pct
        )
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏–º—É–º —Å –±—É—Ñ–µ—Ä–æ–º 1%
        second_swap_min_out = int(base_out_dec * (10 ** base_decimals) * 0.99)
        
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º min_amount_out –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        expected_out_wei = int(base_out_dec * (10 ** base_decimals))
        required_repay = loan_amount + flash_loan_fee_amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª
        if expected_out_wei <= required_repay:
            self.logger.warning(f"‚ùå –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞: –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã—Ö–æ–¥ {base_out_dec:.4f} <= –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å {required_repay/(10**base_decimals):.4f}")
            return None
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º min_amount_out —Å –Ω–µ–±–æ–ª—å—à–∏–º slippage (0.5%)
        slippage = 0.005  # 0.5% –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        min_amount_out = int(expected_out_wei * (1 - slippage))
        
        # –ù–æ –Ω–µ –º–µ–Ω—å—à–µ —á–µ–º loan + fee (–∏–Ω–∞—á–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏—Ç—Å—è)
        if min_amount_out < required_repay:
            min_amount_out = required_repay + 1  # +1 wei —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Ö–≤–∞—Ç–∏–ª–æ
        
        self.logger.info(f"  –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã—Ö–æ–¥: {base_out_dec:.4f} {flash_loan_symbol}")
        self.logger.info(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (—Å–æ slippage): {min_amount_out/(10**base_decimals):.4f} {flash_loan_symbol}")
        
        # –î–ª—è V2 –∏—Å–ø–æ–ª—å–∑—É–µ–º sentinel amount_in=MAX_UINT, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥—Å—Ç–∞–≤–∏–ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å TRADE
        estimated_token_amount = int(trade_out_dec * (10 ** intermediate_decimals))  # –¥–ª—è V3/Algebra
        
        self.logger.debug("DEBUG —Å–≤–æ–ø-2 (–ø–æ —Ä–µ–∑–µ—Ä–≤–∞–º): "
                          f"buy_impact‚âà{buy_impact:.4f}% sell_impact‚âà{sell_impact:.4f}% | "
                          f"trade_out_dec={trade_out_dec:.6f} => est_token_amount={estimated_token_amount} | "
                          f"base_out_dec_min={base_out_dec:.6f} => second_swap_min_out={second_swap_min_out}")
        
        MAX_UINT = (1 << 256) - 1
        
        if sell_dex_type == 'V2' or sell_dex_type == 'UNKNOWN':
            sell_calldata = CalldataBuilder.build_v2_swap(
                router=second_router,
                amount_in=MAX_UINT,
                amount_out_min=second_swap_min_out,
                path=[swap_token_in_2, swap_token_out_2],
                to=self.contract.address,
                deadline=deadline
            )
        elif sell_dex_type == 'V3':
            sell_calldata = CalldataBuilder.build_v3_swap(
                router=second_router,
                token_in=swap_token_in_2,
                token_out=swap_token_out_2,
                fee=3000,
                recipient=self.contract.address,
                deadline=deadline,
                amount_in=estimated_token_amount,
                amount_out_min=second_swap_min_out
            )
        elif sell_dex_type == 'ALGEBRA':
            sell_calldata = CalldataBuilder.build_algebra_swap(
                router=second_router,
                token_in=swap_token_in_2,
                token_out=swap_token_out_2,
                recipient=self.contract.address,
                deadline=deadline,
                amount_in=estimated_token_amount,
                amount_out_min=second_swap_min_out
            )
        else:
            # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é V2
            sell_calldata = CalldataBuilder.build_v2_swap(
                router=second_router,
                amount_in=MAX_UINT,
                amount_out_min=second_swap_min_out,
                path=[swap_token_in_2, swap_token_out_2],
                to=self.contract.address,
                deadline=deadline
            )
        
        swap_data_list.append(sell_calldata)
        routers.append(Web3.to_checksum_address(second_router))
        tokens.append(Web3.to_checksum_address(swap_token_in_2))
        
        
        # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        encoded_params = encode(
            ['bytes[]', 'address[]', 'address[]', 'uint256'],
            [swap_data_list, routers, tokens, min_amount_out]
        )
        
        self.logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ—Ç–æ–≤—ã:")
        self.logger.info(f"  Flash loan: {loan_amount/(10**base_decimals):.2f} {flash_loan_symbol}")
        self.logger.info(f"  –ü—É—Ç—å: {Web3.to_checksum_address(swap_token_in_1)[-6:]} -> {Web3.to_checksum_address(swap_token_out_1)[-6:]} -> {Web3.to_checksum_address(swap_token_out_2)[-6:]}")
        self.logger.info(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –≤—ã—Ö–æ–¥: {min_amount_out/(10**base_decimals):.2f}")
        self.logger.info(f"  –†–æ—É—Ç–µ—Ä—ã: {[r[-6:] for r in routers]}")
        
        return flash_loan_asset, loan_amount, encoded_params
        
    async def execute_arbitrage(self, opportunity: ArbitrageOpportunity) -> bool:
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ USD
            size_usd = opportunity.optimal_trade_size
            if opportunity.quote_token_symbol in ["WMATIC", "WETH", "WBTC"]:
                token_prices = {"WMATIC": 0.5, "WETH": 2300, "WBTC": 58000}
                size_usd = opportunity.optimal_trade_size * token_prices.get(opportunity.quote_token_symbol, 1)
            
            self.logger.info(f"–ò—Å–ø–æ–ª–Ω—è—é –∞—Ä–±–∏—Ç—Ä–∞–∂ {opportunity.token_symbol}")
            self.logger.info(f"   –†–∞–∑–º–µ—Ä: ${size_usd:,.0f} ({opportunity.optimal_trade_size:.4f} {opportunity.quote_token_symbol})")
            self.logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: ${opportunity.expected_profit:,.2f}")
            self.logger.info(f"   DEX: {opportunity.buy_dex} -> {opportunity.sell_dex}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
            if SIMULATION_MODE:
                self.logger.info("–†–ï–ñ–ò–ú –°–ò–ú–£–õ–Ø–¶–ò–ò - —Å–¥–µ–ª–∫–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞")
                self.trades_executed += 1
                self.total_profit += opportunity.expected_profit
                return True
            
            # v7.0: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ prepare_universal_params
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            
            # v7.0: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DS-–ø–∞—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî —Ä–µ–∑–æ–ª–≤ –∞–¥—Ä–µ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ prepare_universal_params()
            self.logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É DS-–ø–∞—Ä; —Ä–µ–∑–æ–ª–≤ –ø–∞—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ prepare_universal_params()")


            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            params = await self.prepare_universal_params(opportunity)
            if not params:
                self.logger.debug("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–¥-—á–µ–∫–æ–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –±–µ–∑ –æ—à–∏–±–∫–∏.")
                return None
            flash_loan_asset, loan_amount, encoded_params = params
            
            # –ü–æ–ª—É—á–∞–µ–º nonce –∏ gas price
            nonce = self.w3.eth.get_transaction_count(self.account.address)
            gas_price = self.w3.eth.gas_price
            
            # –ì–æ—Ç–æ–≤–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = self.contract.functions.executeArbitrage(
                flash_loan_asset,
                loan_amount,
                encoded_params
            ).build_transaction({
                'from': self.account.address,
                'nonce': nonce,
                'gas': 1200000,
                'gasPrice': int(gas_price * 1.2),
                'chainId': self.get_chain_id()
            })
            
           # –°–∏–º—É–ª—è—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
            try:
                # –¢–µ–ø–µ—Ä—å –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
                tx_for_call = {
                    'to': transaction['to'],
                    'from': self.account.address,
                    'data': transaction['data'],
                    'value': transaction.get('value', 0),
                    'gas': transaction.get('gas', 1200000),
                }
                if 'maxFeePerGas' in transaction and 'maxPriorityFeePerGas' in transaction:
                    tx_for_call['maxFeePerGas'] = transaction['maxFeePerGas']
                    tx_for_call['maxPriorityFeePerGas'] = transaction['maxPriorityFeePerGas']
                else:
                    tx_for_call['gasPrice'] = transaction.get('gasPrice', int(self.w3.eth.gas_price * 1.2))

                # 1) –°–Ω–∞—á–∞–ª–∞ eth_call ‚Äî —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ —Ä–µ–≤–µ—Ä—Ç–∏—Ç
                self.w3.eth.call(tx_for_call, block_identifier='latest')

                # 2) –ó–∞—Ç–µ–º estimate_gas ‚Äî —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                estimated_gas = self.w3.eth.estimate_gas(tx_for_call)
                self.logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ì–∞–∑: {estimated_gas}")

                
                # –î–û–ë–ê–í–ò–¢–¨ –û–¢–õ–ê–î–ö–£:
                try:
                    self.logger.info("–ü–æ–¥–ø–∏—Å—ã–≤–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")
                    signed_txn = self.w3.eth.account.sign_transaction(transaction, PRIVATE_KEY)
                    
                    self.logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...")
                    tx_hash = self.w3.eth.send_raw_transaction(signed_txn.raw_transaction)
                    
                    self.logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
                except Exception as send_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {send_error}")
                    return False

                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                self.logger.info("–ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
                receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)

            except Exception as call_error:
                self.logger.error(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (router revert): {call_error}")

                # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å revert-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    if hasattr(call_error, 'args') and len(call_error.args) > 0:
                        # Web3 —á–∞—Å—Ç–æ –∫–ª–∞–¥—ë—Ç –¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                        err_data = call_error.args[0]
                        if isinstance(err_data, dict) and 'data' in err_data:
                            # –ë–µ—Ä—ë–º —Ö–µ–∫—Å revert'–∞
                            hex_data = err_data['data']
                            if isinstance(hex_data, str) and hex_data.startswith('0x'):
                                # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å revert reason (ABI encode –¥–ª—è Error(string))
                                import binascii
                                reason_bytes = bytes.fromhex(hex_data[10:])  # —É–±–∏—Ä–∞–µ–º 0x + 4 –±–∞–π—Ç–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                                try:
                                    reason_str = reason_bytes.decode('utf-8', errors='ignore').strip()
                                    self.logger.error(f"–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–≤–µ—Ä—Ç–∞: {reason_str}")
                                except:
                                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É —Ä–µ–≤–µ—Ä—Ç–∞: {hex_data}")
                except Exception as decode_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≤–µ—Ä—Ç–∞: {decode_error}")

                
                # v6.5.1: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ revert
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ eth_call
                    self.logger.info("üîç –ó–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
                    
                        
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    if hasattr(call_error, 'args') and len(call_error.args) > 0:
                        if isinstance(call_error.args[0], dict):
                            error_dict = call_error.args[0]
                            if 'data' in error_dict:
                                error_data = error_dict['data']
                                    
                                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å custom error
                                if isinstance(error_data, str) and error_data.startswith('0x'):
                                    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
                                    ERROR_SELECTORS = {
                                        '0x08c379a0': 'Error(string)',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è revert —Å—Ç—Ä–æ–∫–∞
                                        '0x4e487b71': 'Panic(uint256)',  # Panic –æ—à–∏–±–∫–∞
                                        '0x1425ea42': 'FailedInnerCall()',  # Custom error –∏–∑ –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                                        '0x8cc95a87': 'MinProfitNotMet(uint256,uint256)',  # Custom error
                                        '0xb119b3b4': 'InvalidSwapPath()',  # Custom error
                                    }
                                        
                                    selector = error_data[:10] if len(error_data) >= 10 else error_data
                                        
                                    if selector in ERROR_SELECTORS:
                                        self.logger.error(f"   ‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏: {ERROR_SELECTORS[selector]}")
                                            
                                        # –ï—Å–ª–∏ —ç—Ç–æ Error(string), –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        if selector == '0x08c379a0' and len(error_data) > 10:
                                            try:
                                                # –£–±–∏—Ä–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                                                error_bytes = bytes.fromhex(error_data[10:])
                                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º offset –∏ length (–ø–µ—Ä–≤—ã–µ 64 –±–∞–π—Ç–∞)
                                                if len(error_bytes) > 64:
                                                    message_bytes = error_bytes[64:]
                                                    message = message_bytes.decode('utf-8', errors='ignore').strip('\x00')
                                                    self.logger.error(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                                            except:
                                                pass
                                    else:
                                        self.logger.error(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—à–∏–±–∫–∏: {selector}")
                                        self.logger.error(f"   üì¶ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {error_data}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –±–∞–ª–∞–Ω—Å Flash Loan –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ Flash Loan...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–£–Æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å Aave —á–µ—Ä–µ–∑ DataProvider
                    aave_data_provider = "0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654"  # Aave V3 PoolDataProvider –Ω–∞ Polygon
                    
                    # ABI –¥–ª—è getReserveData
                    data_provider_abi = json.loads('''[{
                        "inputs": [{"name": "asset", "type": "address"}],
                        "name": "getReserveData",
                        "outputs": [
                            {"name": "unbacked", "type": "uint256"},
                            {"name": "accruedToTreasuryScaled", "type": "uint256"},
                            {"name": "totalAToken", "type": "uint256"},
                            {"name": "totalStableDebt", "type": "uint256"},
                            {"name": "totalVariableDebt", "type": "uint256"},
                            {"name": "liquidityRate", "type": "uint256"},
                            {"name": "variableBorrowRate", "type": "uint256"},
                            {"name": "stableBorrowRate", "type": "uint256"},
                            {"name": "averageStableBorrowRate", "type": "uint256"},
                            {"name": "liquidityIndex", "type": "uint256"},
                            {"name": "variableBorrowIndex", "type": "uint256"},
                            {"name": "lastUpdateTimestamp", "type": "uint40"}
                        ],
                        "type": "function"
                    }]''')
                    
                    try:
                        data_provider_contract = self.w3.eth.contract(
                            address=Web3.to_checksum_address(aave_data_provider), 
                            abi=data_provider_abi
                        )
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∞
                        reserve_data = data_provider_contract.functions.getReserveData(flash_loan_asset).call()
                        
                        # totalAToken - —ç—Ç–æ –æ–±—â–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
                        total_liquidity = reserve_data[2]  # totalAToken
                        total_stable_debt = reserve_data[3]  # totalStableDebt
                        total_variable_debt = reserve_data[4]  # totalVariableDebt
                        
                        # –î–æ—Å—Ç—É–ø–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å = totalAToken - totalStableDebt - totalVariableDebt
                        available_liquidity = total_liquidity - total_stable_debt - total_variable_debt
                        
                        decimals = self.get_token_decimals(flash_loan_asset)
                        available_liquidity_decimal = available_liquidity / (10 ** decimals)
                        total_liquidity_decimal = total_liquidity / (10 ** decimals)
                        loan_amount_decimal = loan_amount / (10 ** decimals)
                        
                        self.logger.info(f"   üí∞ Aave –¥–æ—Å—Ç—É–ø–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å {opportunity.quote_token_symbol}: {available_liquidity_decimal:,.2f}")
                        self.logger.info(f"   üìä –û–±—â–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª–µ: {total_liquidity_decimal:,.2f}")
                        self.logger.info(f"   üìâ –ó–∞–Ω—è—Ç–æ –≤ –¥–æ–ª–≥: {(total_stable_debt + total_variable_debt) / (10 ** decimals):,.2f}")
                        self.logger.info(f"   üéØ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π loan: {loan_amount_decimal:,.2f}")
                        
                        if available_liquidity < loan_amount:
                            self.logger.error(f"   ‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –õ–ò–ö–í–ò–î–ù–û–°–¢–ò –í AAVE!")
                            self.logger.info(f"   üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π loan: {available_liquidity_decimal:,.2f} {opportunity.quote_token_symbol}")
                        else:
                            self.logger.info(f"   ‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è Flash Loan")
                            
                    except Exception as aave_error:
                        self.logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Aave: {aave_error}")
                        
                        # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Ç—è –±—ã –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—É–ª–µ
                        self.logger.info("   –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                        aave_pool = "0x794a61358D6845594F94dc1DB02A252b5b4814aD"
                        erc20_abi = json.loads('[{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"type":"function"}]')
                        token_contract = self.w3.eth.contract(address=Web3.to_checksum_address(flash_loan_asset), abi=erc20_abi)
                        
                        pool_balance = token_contract.functions.balanceOf(aave_pool).call()
                        pool_balance_decimal = pool_balance / (10 ** self.get_token_decimals(flash_loan_asset))
                        self.logger.info(f"   üí∞ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—É–ª–µ: {pool_balance_decimal:,.2f} {opportunity.quote_token_symbol}")
                    
                    self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑–µ—Ä–≤—ã –Ω–∞ DEX...")
                    pairs_to_check = [
                        (opportunity.get('buy_pair'),  opportunity.get('buy_router'),  True,  opportunity.get('buy_dex')),
                        (opportunity.get('sell_pair'), opportunity.get('sell_router'), False, opportunity.get('sell_dex')),
                    ]

                    for i, (pair_address, router, is_buy, dex_name) in enumerate(pairs_to_check, 1):
                        action = "–ø–æ–∫—É–ø–∫–∞" if is_buy else "–ø—Ä–æ–¥–∞–∂–∞"
                        if not pair_address:
                            self.logger.warning(f"   DEX {i} ({action} –Ω–∞ {dex_name or 'unknown'}): –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                            continue
                        try:
                            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –ø–∞—Ä—ã (UniswapV2/Quickswap): token0, token1, getReserves
                            pair_abi = json.loads("""
                            [
                              {"constant":true,"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},
                              {"constant":true,"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},
                              {"constant":true,"inputs":[],"name":"getReserves","outputs":[
                                {"internalType":"uint112","name":"reserve0","type":"uint112"},
                                {"internalType":"uint112","name":"reserve1","type":"uint112"},
                                {"internalType":"uint32","name":"blockTimestampLast","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"}
                            ]""".strip())
                            pair_contract = self.w3.eth.contract(address=Web3.to_checksum_address(pair_address), abi=pair_abi)
                            r0, r1, _ = pair_contract.functions.getReserves().call()
                            t0 = pair_contract.functions.token0().call()
                            t1 = pair_contract.functions.token1().call()

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–æ–≤ ‚Äî –±–∞–∑–æ–≤—ã–π (quote), –∞ –∫–∞–∫–æ–π ‚Äî —Ç–æ—Ä–≥—É–µ–º—ã–π
                            quote_addr = opportunity.quote_token_address
                            trade_addr = opportunity.token_address

                            if t0.lower() == quote_addr.lower():
                                base_reserve_raw, trade_reserve_raw = r0, r1
                            elif t1.lower() == quote_addr.lower():
                                base_reserve_raw, trade_reserve_raw = r1, r0
                            else:
                                self.logger.warning(f"   DEX {i} ({action} –Ω–∞ {dex_name or 'unknown'}): –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –ø–∞—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å quote ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                                continue

                            base_decimals  = self.get_token_decimals(quote_addr)
                            trade_decimals = self.get_token_decimals(trade_addr)
                            base_reserve  = base_reserve_raw  / (10 ** base_decimals)
                            trade_reserve = trade_reserve_raw / (10 ** trade_decimals)

                            self.logger.info(f"   DEX {i} ({action} –Ω–∞ {dex_name or 'unknown'}): —Ä–µ–∑–µ—Ä–≤—ã base={base_reserve:.2f}, trade={trade_reserve:.2f}")

                            
                        except Exception as reserve_error:
                            self.logger.warning(f"   DEX {i} ({action} –Ω–∞ {dex_name or 'unknown'}): –û—Ç—Å–µ—è–Ω–æ: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã (0/1/None): {reserve_error}")

                    
                except Exception as diag_error:
                    self.logger.error(f"   –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_error}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                self.logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                self.logger.info(f"   Flash loan —Ç–æ–∫–µ–Ω: {flash_loan_asset}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Flash Loan
                flash_loan_symbol_local = "UNKNOWN"
                for addr, symbol in self.base_tokens.items():
                    if addr.lower() == flash_loan_asset.lower():
                        flash_loan_symbol_local = symbol
                        break
                if flash_loan_asset.lower() == opportunity.token_address.lower():
                    flash_loan_symbol_local = opportunity.token_symbol

                self.logger.info(f"   Flash loan amount: {loan_amount} ({loan_amount / (10 ** self.get_token_decimals(flash_loan_asset)):.4f} {flash_loan_symbol_local})")
                # self.logger.info(f"   Min profit: {min_profit_wei}")  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
                self.logger.info(f"   Buy router: {opportunity.get('buy_router')}")
                self.logger.info(f"   Sell router: {opportunity.get('sell_router')}")
                self.logger.info(f"   Buy DEX: {opportunity.get('buy_dex')}")
                self.logger.info(f"   Sell DEX: {opportunity.get('sell_dex')}")

                
                return False
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            signed_txn = self.w3.eth.account.sign_transaction(transaction, PRIVATE_KEY)
            tx_hash = self.w3.eth.send_raw_transaction(signed_txn.raw_transaction)
            
            self.logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash, timeout=60)
            
            if receipt['status'] == 1:
                self.logger.info(f"‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω!")
                self.trades_executed += 1
                self.total_profit += opportunity.expected_profit
                return True
            else:
                self.logger.error(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
            
    def get_chain_id(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç chain ID –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏"""
        chain_ids = {
            "polygon": 137,
            "ethereum": 1,
            "bsc": 56,
            "arbitrum": 42161,
            "optimism": 10
        }
        return chain_ids.get(CHAIN, 137)
            
    async def run_single_scan(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.total_scans += 1
        
        # –ö–∞–∂–¥—ã–µ 5 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –º–µ–Ω—è–µ–º RPC
        if self.total_scans % 5 == 0:
            new_rpc = self.rpc_rotator.get_next()
            self.w3 = Web3(Web3.HTTPProvider(new_rpc))
            if CHAIN in ['polygon', 'bsc']:
                self.w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)
        
        self.logger.info(f"\n{'='*60}")
        self.logger.info(f"–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï #{self.total_scans}")
        self.logger.info(f"RPC: {self.rpc_rotator.get_current()[:30]}...")
        self.logger.info(f"{'='*60}")
        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–∫–∞–Ω
        self.combos_scan = 0
        self.cands_scan = 0
        self.n_low_spread = 0
        self.n_low_spread_onchain = 0  # –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
        self.n_nets0 = 0
        self.n_nonv2 = 0
        self.skip_bad_reserves_onchain = 0
        self.all_spreads_scan = []
        
       # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º all_pairs (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ)
        self.logger.info("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∞—Ö...")
        all_pairs = []  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
        
        # –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        self.logger.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ v2_combos
        if hasattr(self, 'load_v2_combos'):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –û–î–ò–ù –†–ê–ó
            combos = await self.load_v2_combos()
            if combos:
                # –ü–µ—Ä–µ–¥–∞–µ–º combos –≤ get_all_active_pairs —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                all_pairs = await self.get_all_active_pairs(combos)
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º v2_combos –Ω–∞–ø—Ä—è–º—É—é
                opportunities = await self.process_v2_combos(combos)
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                all_pairs = await self.get_all_active_pairs()
                opportunities = await self.find_arbitrage_opportunities(all_pairs)
        else:
            opportunities = await self.find_arbitrage_opportunities(all_pairs)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ANKR –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(self, 'ankr_stats'):
            total = self.ankr_stats['success'] + self.ankr_stats['fail']
            if total > 0:
                success_rate = (self.ankr_stats['success'] / total) * 100
                self.logger.info(f"üìà ANKR –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–∫–∞–Ω: {self.ankr_stats['success']}/{total} ({success_rate:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö)")
                if success_rate < 50:
                    self.logger.warning(f"‚ö†Ô∏è ANKR —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ! –í–æ–∑–º–æ–∂–Ω–æ DexScreener –¥–∞–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä")
        
        self.opportunities_found += len(opportunities)
        
        if opportunities:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ—Ñ–∏—Ç–Ω—ã–µ (—Å size > 0)
            real_profitable = [opp for opp in opportunities if opp.optimal_trade_size > 0]
            
            if real_profitable:
                self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(real_profitable)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! (–∏–∑ {len(opportunities)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)")
            else:
                self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –Ω–æ –≤—Å–µ —Å size=0 (net_spread ‚â§ 0)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –†–ï–ê–õ–¨–ù–û –ø—Ä–æ—Ñ–∏—Ç–Ω—ã—Ö
            for i, opp in enumerate(real_profitable[:10], 1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ USD –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                size_usd = opp.optimal_trade_size
                if opp.quote_token_symbol in ["WMATIC", "WETH"]:
                    token_prices = {"WMATIC": 0.5, "WETH": 2300}
                    size_usd = opp.optimal_trade_size * token_prices.get(opp.quote_token_symbol, 1)
                
                self.logger.info(
                    f"{i}. {opp.token_symbol}: "
                    f"—Å–ø—Ä–µ–¥ {opp.spread_percent:.2f}% | "
                    f"—Ä–∞–∑–º–µ—Ä ${size_usd:,.0f} ({opp.optimal_trade_size:.6f} {opp.quote_token_symbol}) | "  # –î–û–ë–ê–í–ò–õ–ò —Ä–∞–∑–º–µ—Ä –≤ —Ç–æ–∫–µ–Ω–∞—Ö
                    f"–ø—Ä–∏–±—ã–ª—å ${opp.expected_profit:,.2f} | "
                    f"impact {opp.price_impact_percent:.2f}%"
                )
                self.logger.info(f"   {opp.buy_dex} -> {opp.sell_dex} | –ë–∞–∑–∞: {opp.quote_token_symbol}")
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–µ 3 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
            for i, opportunity in enumerate(opportunities[:3], 1):
                if opportunity.expected_profit >= MIN_PROFIT_USD:
                    self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ #{i}: –∏—Å–ø–æ–ª–Ω—è—é {opportunity.token_symbol}")
                    result = await self.execute_arbitrage(opportunity)
                    
                    if result is None:
                        self.logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ #{i}: –ø—Ä–µ–¥-—á–µ–∫/–≤–∞–ª–∏–¥–∞—Ü–∏—è.")
                        continue
                    elif result is True:
                        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å #{i}")
                        break
                    else:
                        self.logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç—å #{i}, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â—É—é...")

                
        else:
            self.logger.info("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è–º–∏
        self.logger.info(f"\n‚Äî –°–¢–ê–¢–ò–°–¢–ò–ö–ê ‚Äî")
        
        # –í—ã–≤–æ–¥–∏–º TOP5 —Å–ø—Ä–µ–¥–æ–≤ –î–û V2-—Ñ–∏–ª—å—Ç—Ä–∞ (–∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)
        if hasattr(self, 'all_spreads_before_v2') and self.all_spreads_before_v2:
            sorted_before = sorted(self.all_spreads_before_v2, key=lambda x: x[0], reverse=True)[:5]
            self.logger.info("TOP5 —Å–ø—Ä–µ–¥–æ–≤ (–î–û V2-—Ñ–∏–ª—å—Ç—Ä–∞):")
            for spread, token, buy_dex, sell_dex, reason in sorted_before:
                self.logger.info(f"  {spread:.3f}% | {token[:8]} | {buy_dex}->{sell_dex} | –æ—Ç—Å–µ—è–Ω: {reason}")
        
        # –í—ã–≤–æ–¥–∏–º TOP5 —Å–ø—Ä–µ–¥–æ–≤ –ü–û–°–õ–ï V2-—Ñ–∏–ª—å—Ç—Ä–∞ (—á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ç–æ—Ä–≥—É–µ–º)
        if hasattr(self, 'all_spreads_after_v2') and self.all_spreads_after_v2:
            sorted_after = sorted(self.all_spreads_after_v2, key=lambda x: x[0], reverse=True)[:5]
            self.logger.info("TOP5 —Å–ø—Ä–µ–¥–æ–≤ (–ü–û–°–õ–ï V2-—Ñ–∏–ª—å—Ç—Ä–∞):")
            for spread, token, buy_dex, sell_dex in sorted_after:
                self.logger.info(f"  {spread:.3f}% | {token[:8]} | {buy_dex}->{sell_dex}")
        
        self.logger.info(f"–ö–æ–º–±–∏–Ω–∞—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.combos_scan if hasattr(self, 'combos_scan') else 0}")
        self.logger.info(f"–ö–∞–Ω–¥–∏–¥–∞—Ç—ã (—Å–ø—Ä–µ–¥ >= {MIN_SPREAD_PERCENT}%): {self.cands_scan if hasattr(self, 'cands_scan') else 0}")
        
        # –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ—Ñ–∏—Ç–Ω—ã–µ –ø–æ —Ç–µ–º –∂–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º, —á—Ç–æ –∏ –ø—Ä–µ–¥-—á–µ–∫
        real_profitable = []
        for opp in opportunities:
            if opp.optimal_trade_size <= 0:
                continue
            # –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ–¥-—á–µ–∫ —ç–∫–æ–Ω–æ–º–∏–∫–∏
            base_decimals = self.get_token_decimals(opp.quote_token_address) 
            loan_amount = int(opp.optimal_trade_size * (10 ** base_decimals))
            MIN_FLASH_LOAN = int(1e-6 * (10 ** base_decimals))  # MIN_FLASH_STEP
            
            if loan_amount >= MIN_FLASH_LOAN and opp.expected_profit >= MIN_PROFIT_USD:
                real_profitable.append(opp)
        
        self.logger.info(f"–ü—Ä–æ—Ñ–∏—Ç–Ω—ã–µ (–∑–∞ —Å–∫–∞–Ω): {len(real_profitable)} –∏–∑ {len(opportunities)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö")
        
        self.logger.info(f"")
        self.logger.info(f"")
        self.logger.info(f"–û—Ç—Å–µ—è–Ω–æ:")
        self.logger.info(f"  —Å–ø—Ä–µ–¥ < {MIN_SPREAD_PERCENT}% (DS): {getattr(self, 'n_low_spread', 0)}")
        self.logger.info(f"  —Å–ø—Ä–µ–¥ < {MIN_SPREAD_PERCENT}% (onchain): {getattr(self, 'n_low_spread_onchain', 0)}")
        self.logger.info(f"  –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å < ${MIN_LIQUIDITY_USD} (onchain USD): {getattr(self, 'n_low_liquidity_usd', 0)}")  # –ù–û–í–û–ï
        self.logger.info(f"  net_spread ‚â§ 0 (–ø–æ LUT): {getattr(self, 'n_nets0', 0)}")
        self.logger.info(f"  —Ç–∏–ø DEX –Ω–µ V2: {getattr(self, 'n_nonv2', 0)}")
        self.logger.info(f"  –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Ä–µ–∑–µ—Ä–≤—ã onchain: {getattr(self, 'skip_bad_reserves_onchain', 0)}")
        self.logger.info(f"  –Ω–µ V2-–ø–∞—Ä—ã: {getattr(self, 'skip_non_v2_pair', 0)}")
        self.logger.info(f"  ANKR rate limits: {getattr(self, 'skip_ankr_rate_limit', 0)}")
        self.logger.info(f"  –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤: {getattr(self, 'skip_address_mismatch', 0)}")

        # –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ —Å–ø—Ä–µ–¥–æ–≤ –ø–æ –í–°–ï–ú –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º (–Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏—Ç–Ω—ã–º)
        if hasattr(self, 'all_spreads_scan') and self.all_spreads_scan:
            all_spreads_sorted = sorted(self.all_spreads_scan)
            if len(all_spreads_sorted) > 20:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                p95_all = all_spreads_sorted[int(len(all_spreads_sorted) * 0.95)]
                p99_all = all_spreads_sorted[int(len(all_spreads_sorted) * 0.99)]
                max_all = all_spreads_sorted[-1]
                self.logger.info(f"")
                self.logger.info(f"–°–ø—Ä–µ–¥—ã –í–°–ï–• –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: max={max_all:.3f}% p95={p95_all:.3f}% p99={p99_all:.3f}%")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–µ–¥–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π  
        if real_profitable:
            spreads = [opp.spread_percent for opp in real_profitable]
            if spreads:
                max_spread = max(spreads)
                p95_spread = sorted(spreads)[int(len(spreads) * 0.95)] if len(spreads) > 1 else max_spread
                p99_spread = sorted(spreads)[int(len(spreads) * 0.99)] if len(spreads) > 1 else max_spread
                
                # –û—Ü–µ–Ω–∫–∞ net_spread (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
                fees_total = 0.0065  # 0.3% + 0.3% + 0.05%
                net_spreads = [(s/100 - fees_total) for s in spreads]
                max_net = max(net_spreads) * 100
                
                self.logger.info(f"–°–ø—Ä–µ–¥—ã –ø—Ä–æ—Ñ–∏—Ç–Ω—ã—Ö: max={max_spread:.3f}% p95={p95_spread:.3f}% p99={p99_spread:.3f}%")
                self.logger.info(f"Max net_spread: {max_net:.3f}%")
                
        self.logger.info(f"")
        self.logger.info(f"–ö–æ–º–∏—Å—Å–∏–∏ (—Ñ–∞–∫—Ç): buy=0.300% sell=0.300% flash=0.050% ‚Üí –≤—Å–µ–≥–æ=0.650%")
        self.logger.info(f"")
        self.logger.info(f"–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {self.total_scans}")
        self.logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {self.opportunities_found}")
        self.logger.info(f"–ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {self.trades_executed}")
        self.logger.info(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit:,.2f}")
        
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –ë–æ—Ç–∞ v6.3")
        self.logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        self.logger.info(f"   –°–µ—Ç—å: {CHAIN}")
        self.logger.info(f"   –ö–æ–Ω—Ç—Ä–∞–∫—Ç: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô")
        self.logger.info(f"   –ü–æ–¥–¥–µ—Ä–∂–∫–∞: V2, V3, Algebra DEX")
        self.logger.info(f"   –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã: {len(self.dex_config)}")
        self.logger.info(f"   –í–∫–ª—é—á–µ–Ω–Ω—ã–µ DEX: {', '.join(self.enabled_dexes)}")
        self.logger.info(f"   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã: –í–ö–õ ‚úÖ (v6.3)")
        self.logger.info(f"   –ë–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã: {', '.join(self.base_tokens.values())}")
        self.logger.info(f"   –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: ${MIN_PROFIT_USD}")
        self.logger.info(f"   –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${MIN_LIQUIDITY_USD:,}")
        
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        from config import MAX_CONCURRENT_REQUESTS
        connector = aiohttp.TCPConnector(limit=MAX_CONCURRENT_REQUESTS)
        self.session = aiohttp.ClientSession(connector=connector)
        
        try:
            while True:
                try:
                    await self.run_single_scan()
                    
                        
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                self.logger.info(f"\n–ñ–¥—É {SCAN_INTERVAL} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(SCAN_INTERVAL)
                
        finally:
            await self.session.close()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("\nüîç DEBUG: –§—É–Ω–∫—Ü–∏—è main() –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not CONTRACT_ADDRESS or not PRIVATE_KEY:
        print("–û–®–ò–ë–ö–ê: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CONTRACT_ADDRESS –∏ PRIVATE_KEY –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print("üîç DEBUG: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    print(f"üîç DEBUG: CONTRACT_ADDRESS = {CONTRACT_ADDRESS}")
    print(f"üîç DEBUG: PRIVATE_KEY = {'*' * 10 if PRIVATE_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üîç DEBUG: –°–æ–∑–¥–∞—é —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...")
    bot = ArbitrageBot()
    print("üîç DEBUG: –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    await bot.run()


if __name__ == "__main__":
    print("\nüîç DEBUG: –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å")
    print("üîç DEBUG: –ó–∞–ø—É—Å–∫–∞—é asyncio.run(main())...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í MAIN: {e}")
        traceback.print_exc()